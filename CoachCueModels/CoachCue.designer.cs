#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoachCue.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CoachCue")]
	public partial class CoachCueDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertpositiontype(positiontype instance);
    partial void Updatepositiontype(positiontype instance);
    partial void Deletepositiontype(positiontype instance);
    partial void Insertposition(position instance);
    partial void Updateposition(position instance);
    partial void Deleteposition(position instance);
    partial void Insertstatus(status instance);
    partial void Updatestatus(status instance);
    partial void Deletestatus(status instance);
    partial void Insertcomponent(component instance);
    partial void Updatecomponent(component instance);
    partial void Deletecomponent(component instance);
    partial void Insertnflteam(nflteam instance);
    partial void Updatenflteam(nflteam instance);
    partial void Deletenflteam(nflteam instance);
    partial void Inserttwitteraccounttype(twitteraccounttype instance);
    partial void Updatetwitteraccounttype(twitteraccounttype instance);
    partial void Deletetwitteraccounttype(twitteraccounttype instance);
    partial void Insertnflplayer(nflplayer instance);
    partial void Updatenflplayer(nflplayer instance);
    partial void Deletenflplayer(nflplayer instance);
    partial void Inserttwitteraccount(twitteraccount instance);
    partial void Updatetwitteraccount(twitteraccount instance);
    partial void Deletetwitteraccount(twitteraccount instance);
    partial void Insertnflteams_twitteraccount(nflteams_twitteraccount instance);
    partial void Updatenflteams_twitteraccount(nflteams_twitteraccount instance);
    partial void Deletenflteams_twitteraccount(nflteams_twitteraccount instance);
    partial void Insertmatchup(matchup instance);
    partial void Updatematchup(matchup instance);
    partial void Deletematchup(matchup instance);
    partial void Insertmatchupscoringtype(matchupscoringtype instance);
    partial void Updatematchupscoringtype(matchupscoringtype instance);
    partial void Deletematchupscoringtype(matchupscoringtype instance);
    partial void Insertnflseason(nflseason instance);
    partial void Updatenflseason(nflseason instance);
    partial void Deletenflseason(nflseason instance);
    partial void Insertusers_account(users_account instance);
    partial void Updateusers_account(users_account instance);
    partial void Deleteusers_account(users_account instance);
    partial void Insertusers_matchup(users_matchup instance);
    partial void Updateusers_matchup(users_matchup instance);
    partial void Deleteusers_matchup(users_matchup instance);
    partial void Insertavatar(avatar instance);
    partial void Updateavatar(avatar instance);
    partial void Deleteavatar(avatar instance);
    partial void Insertuser_login(user_login instance);
    partial void Updateuser_login(user_login instance);
    partial void Deleteuser_login(user_login instance);
    partial void Insertnotification(notification instance);
    partial void Updatenotification(notification instance);
    partial void Deletenotification(notification instance);
    partial void Insertnotification_type(notification_type instance);
    partial void Updatenotification_type(notification_type instance);
    partial void Deletenotification_type(notification_type instance);
    partial void Insertusers_setting(users_setting instance);
    partial void Updateusers_setting(users_setting instance);
    partial void Deleteusers_setting(users_setting instance);
    partial void Insertaccounttype(accounttype instance);
    partial void Updateaccounttype(accounttype instance);
    partial void Deleteaccounttype(accounttype instance);
    partial void Insertmessagecontexttype(messagecontexttype instance);
    partial void Updatemessagecontexttype(messagecontexttype instance);
    partial void Deletemessagecontexttype(messagecontexttype instance);
    partial void Insertgameschedule(gameschedule instance);
    partial void Updategameschedule(gameschedule instance);
    partial void Deletegameschedule(gameschedule instance);
    partial void Insertusers_view(users_view instance);
    partial void Updateusers_view(users_view instance);
    partial void Deleteusers_view(users_view instance);
    partial void Insertmessage_user(message_user instance);
    partial void Updatemessage_user(message_user instance);
    partial void Deletemessage_user(message_user instance);
    partial void Insertmessage_player(message_player instance);
    partial void Updatemessage_player(message_player instance);
    partial void Deletemessage_player(message_player instance);
    partial void Insertsignup(signup instance);
    partial void Updatesignup(signup instance);
    partial void Deletesignup(signup instance);
    partial void Insertusers_trophy(users_trophy instance);
    partial void Updateusers_trophy(users_trophy instance);
    partial void Deleteusers_trophy(users_trophy instance);
    partial void Inserttrophy(trophy instance);
    partial void Updatetrophy(trophy instance);
    partial void Deletetrophy(trophy instance);
    partial void InsertmediaType(mediaType instance);
    partial void UpdatemediaType(mediaType instance);
    partial void DeletemediaType(mediaType instance);
    partial void Insertmessage(message instance);
    partial void Updatemessage(message instance);
    partial void Deletemessage(message instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    #endregion
		
		public CoachCueDataContext() : 
				base(global::CoachCueModels.Properties.Settings.Default.CoachCueConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CoachCueDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoachCueDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoachCueDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoachCueDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<positiontype> positiontypes
		{
			get
			{
				return this.GetTable<positiontype>();
			}
		}
		
		public System.Data.Linq.Table<position> positions
		{
			get
			{
				return this.GetTable<position>();
			}
		}
		
		public System.Data.Linq.Table<status> status
		{
			get
			{
				return this.GetTable<status>();
			}
		}
		
		public System.Data.Linq.Table<component> components
		{
			get
			{
				return this.GetTable<component>();
			}
		}
		
		public System.Data.Linq.Table<nflteam> nflteams
		{
			get
			{
				return this.GetTable<nflteam>();
			}
		}
		
		public System.Data.Linq.Table<twitteraccounttype> twitteraccounttypes
		{
			get
			{
				return this.GetTable<twitteraccounttype>();
			}
		}
		
		public System.Data.Linq.Table<nflplayer> nflplayers
		{
			get
			{
				return this.GetTable<nflplayer>();
			}
		}
		
		public System.Data.Linq.Table<twitteraccount> twitteraccounts
		{
			get
			{
				return this.GetTable<twitteraccount>();
			}
		}
		
		public System.Data.Linq.Table<nflteams_twitteraccount> nflteams_twitteraccounts
		{
			get
			{
				return this.GetTable<nflteams_twitteraccount>();
			}
		}
		
		public System.Data.Linq.Table<matchup> matchups
		{
			get
			{
				return this.GetTable<matchup>();
			}
		}
		
		public System.Data.Linq.Table<matchupscoringtype> matchupscoringtypes
		{
			get
			{
				return this.GetTable<matchupscoringtype>();
			}
		}
		
		public System.Data.Linq.Table<nflseason> nflseasons
		{
			get
			{
				return this.GetTable<nflseason>();
			}
		}
		
		public System.Data.Linq.Table<users_account> users_accounts
		{
			get
			{
				return this.GetTable<users_account>();
			}
		}
		
		public System.Data.Linq.Table<users_matchup> users_matchups
		{
			get
			{
				return this.GetTable<users_matchup>();
			}
		}
		
		public System.Data.Linq.Table<avatar> avatars
		{
			get
			{
				return this.GetTable<avatar>();
			}
		}
		
		public System.Data.Linq.Table<user_login> user_logins
		{
			get
			{
				return this.GetTable<user_login>();
			}
		}
		
		public System.Data.Linq.Table<notification> notifications
		{
			get
			{
				return this.GetTable<notification>();
			}
		}
		
		public System.Data.Linq.Table<notification_type> notification_types
		{
			get
			{
				return this.GetTable<notification_type>();
			}
		}
		
		public System.Data.Linq.Table<users_setting> users_settings
		{
			get
			{
				return this.GetTable<users_setting>();
			}
		}
		
		public System.Data.Linq.Table<accounttype> accounttypes
		{
			get
			{
				return this.GetTable<accounttype>();
			}
		}
		
		public System.Data.Linq.Table<messagecontexttype> messagecontexttypes
		{
			get
			{
				return this.GetTable<messagecontexttype>();
			}
		}
		
		public System.Data.Linq.Table<gameschedule> gameschedules
		{
			get
			{
				return this.GetTable<gameschedule>();
			}
		}
		
		public System.Data.Linq.Table<users_view> users_views
		{
			get
			{
				return this.GetTable<users_view>();
			}
		}
		
		public System.Data.Linq.Table<message_user> message_users
		{
			get
			{
				return this.GetTable<message_user>();
			}
		}
		
		public System.Data.Linq.Table<message_player> message_players
		{
			get
			{
				return this.GetTable<message_player>();
			}
		}
		
		public System.Data.Linq.Table<signup> signups
		{
			get
			{
				return this.GetTable<signup>();
			}
		}
		
		public System.Data.Linq.Table<users_trophy> users_trophies
		{
			get
			{
				return this.GetTable<users_trophy>();
			}
		}
		
		public System.Data.Linq.Table<trophy> trophies
		{
			get
			{
				return this.GetTable<trophy>();
			}
		}
		
		public System.Data.Linq.Table<mediaType> mediaTypes
		{
			get
			{
				return this.GetTable<mediaType>();
			}
		}
		
		public System.Data.Linq.Table<message> messages
		{
			get
			{
				return this.GetTable<message>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.positiontype")]
	public partial class positiontype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _positionTypeID;
		
		private string _positionTypeName;
		
		private EntitySet<position> _positions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpositionTypeIDChanging(int value);
    partial void OnpositionTypeIDChanged();
    partial void OnpositionTypeNameChanging(string value);
    partial void OnpositionTypeNameChanged();
    #endregion
		
		public positiontype()
		{
			this._positions = new EntitySet<position>(new Action<position>(this.attach_positions), new Action<position>(this.detach_positions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int positionTypeID
		{
			get
			{
				return this._positionTypeID;
			}
			set
			{
				if ((this._positionTypeID != value))
				{
					this.OnpositionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._positionTypeID = value;
					this.SendPropertyChanged("positionTypeID");
					this.OnpositionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionTypeName", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string positionTypeName
		{
			get
			{
				return this._positionTypeName;
			}
			set
			{
				if ((this._positionTypeName != value))
				{
					this.OnpositionTypeNameChanging(value);
					this.SendPropertyChanging();
					this._positionTypeName = value;
					this.SendPropertyChanged("positionTypeName");
					this.OnpositionTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="positiontype_position", Storage="_positions", ThisKey="positionTypeID", OtherKey="positionTypeID")]
		public EntitySet<position> positions
		{
			get
			{
				return this._positions;
			}
			set
			{
				this._positions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_positions(position entity)
		{
			this.SendPropertyChanging();
			entity.positiontype = this;
		}
		
		private void detach_positions(position entity)
		{
			this.SendPropertyChanging();
			entity.positiontype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.positions")]
	public partial class position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _positionID;
		
		private string _positionName;
		
		private int _positionTypeID;
		
		private EntitySet<nflplayer> _nflplayers;
		
		private EntityRef<positiontype> _positiontype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpositionIDChanging(int value);
    partial void OnpositionIDChanged();
    partial void OnpositionNameChanging(string value);
    partial void OnpositionNameChanged();
    partial void OnpositionTypeIDChanging(int value);
    partial void OnpositionTypeIDChanged();
    #endregion
		
		public position()
		{
			this._nflplayers = new EntitySet<nflplayer>(new Action<nflplayer>(this.attach_nflplayers), new Action<nflplayer>(this.detach_nflplayers));
			this._positiontype = default(EntityRef<positiontype>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int positionID
		{
			get
			{
				return this._positionID;
			}
			set
			{
				if ((this._positionID != value))
				{
					this.OnpositionIDChanging(value);
					this.SendPropertyChanging();
					this._positionID = value;
					this.SendPropertyChanged("positionID");
					this.OnpositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string positionName
		{
			get
			{
				return this._positionName;
			}
			set
			{
				if ((this._positionName != value))
				{
					this.OnpositionNameChanging(value);
					this.SendPropertyChanging();
					this._positionName = value;
					this.SendPropertyChanged("positionName");
					this.OnpositionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionTypeID", DbType="Int NOT NULL")]
		public int positionTypeID
		{
			get
			{
				return this._positionTypeID;
			}
			set
			{
				if ((this._positionTypeID != value))
				{
					if (this._positiontype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpositionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._positionTypeID = value;
					this.SendPropertyChanged("positionTypeID");
					this.OnpositionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="position_nflplayer", Storage="_nflplayers", ThisKey="positionID", OtherKey="positionID")]
		public EntitySet<nflplayer> nflplayers
		{
			get
			{
				return this._nflplayers;
			}
			set
			{
				this._nflplayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="positiontype_position", Storage="_positiontype", ThisKey="positionTypeID", OtherKey="positionTypeID", IsForeignKey=true)]
		public positiontype positiontype
		{
			get
			{
				return this._positiontype.Entity;
			}
			set
			{
				positiontype previousValue = this._positiontype.Entity;
				if (((previousValue != value) 
							|| (this._positiontype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._positiontype.Entity = null;
						previousValue.positions.Remove(this);
					}
					this._positiontype.Entity = value;
					if ((value != null))
					{
						value.positions.Add(this);
						this._positionTypeID = value.positionTypeID;
					}
					else
					{
						this._positionTypeID = default(int);
					}
					this.SendPropertyChanged("positiontype");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_nflplayers(nflplayer entity)
		{
			this.SendPropertyChanging();
			entity.position = this;
		}
		
		private void detach_nflplayers(nflplayer entity)
		{
			this.SendPropertyChanging();
			entity.position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.status")]
	public partial class status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _statusID;
		
		private string _statusName;
		
		private int _componentID;
		
		private EntitySet<nflplayer> _nflplayers;
		
		private EntitySet<twitteraccount> _twitteraccounts;
		
		private EntitySet<matchup> _matchups;
		
		private EntitySet<avatar> _avatars;
		
		private EntitySet<notification> _notifications;
		
		private EntitySet<trophy> _trophies;
		
		private EntitySet<user> _users;
		
		private EntityRef<component> _component;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    partial void OnstatusNameChanging(string value);
    partial void OnstatusNameChanged();
    partial void OncomponentIDChanging(int value);
    partial void OncomponentIDChanged();
    #endregion
		
		public status()
		{
			this._nflplayers = new EntitySet<nflplayer>(new Action<nflplayer>(this.attach_nflplayers), new Action<nflplayer>(this.detach_nflplayers));
			this._twitteraccounts = new EntitySet<twitteraccount>(new Action<twitteraccount>(this.attach_twitteraccounts), new Action<twitteraccount>(this.detach_twitteraccounts));
			this._matchups = new EntitySet<matchup>(new Action<matchup>(this.attach_matchups), new Action<matchup>(this.detach_matchups));
			this._avatars = new EntitySet<avatar>(new Action<avatar>(this.attach_avatars), new Action<avatar>(this.detach_avatars));
			this._notifications = new EntitySet<notification>(new Action<notification>(this.attach_notifications), new Action<notification>(this.detach_notifications));
			this._trophies = new EntitySet<trophy>(new Action<trophy>(this.attach_trophies), new Action<trophy>(this.detach_trophies));
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			this._component = default(EntityRef<component>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusName", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string statusName
		{
			get
			{
				return this._statusName;
			}
			set
			{
				if ((this._statusName != value))
				{
					this.OnstatusNameChanging(value);
					this.SendPropertyChanging();
					this._statusName = value;
					this.SendPropertyChanged("statusName");
					this.OnstatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_componentID", DbType="Int NOT NULL")]
		public int componentID
		{
			get
			{
				return this._componentID;
			}
			set
			{
				if ((this._componentID != value))
				{
					if (this._component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncomponentIDChanging(value);
					this.SendPropertyChanging();
					this._componentID = value;
					this.SendPropertyChanged("componentID");
					this.OncomponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_nflplayer", Storage="_nflplayers", ThisKey="statusID", OtherKey="statusID")]
		public EntitySet<nflplayer> nflplayers
		{
			get
			{
				return this._nflplayers;
			}
			set
			{
				this._nflplayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_twitteraccount", Storage="_twitteraccounts", ThisKey="statusID", OtherKey="statusID")]
		public EntitySet<twitteraccount> twitteraccounts
		{
			get
			{
				return this._twitteraccounts;
			}
			set
			{
				this._twitteraccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_matchup", Storage="_matchups", ThisKey="statusID", OtherKey="statusID")]
		public EntitySet<matchup> matchups
		{
			get
			{
				return this._matchups;
			}
			set
			{
				this._matchups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_avatar", Storage="_avatars", ThisKey="statusID", OtherKey="statusID")]
		public EntitySet<avatar> avatars
		{
			get
			{
				return this._avatars;
			}
			set
			{
				this._avatars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_notification", Storage="_notifications", ThisKey="statusID", OtherKey="statusID")]
		public EntitySet<notification> notifications
		{
			get
			{
				return this._notifications;
			}
			set
			{
				this._notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_trophy", Storage="_trophies", ThisKey="statusID", OtherKey="statusID")]
		public EntitySet<trophy> trophies
		{
			get
			{
				return this._trophies;
			}
			set
			{
				this._trophies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_user", Storage="_users", ThisKey="statusID", OtherKey="statusID")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="component_status", Storage="_component", ThisKey="componentID", OtherKey="componentID", IsForeignKey=true)]
		public component component
		{
			get
			{
				return this._component.Entity;
			}
			set
			{
				component previousValue = this._component.Entity;
				if (((previousValue != value) 
							|| (this._component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._component.Entity = null;
						previousValue.status.Remove(this);
					}
					this._component.Entity = value;
					if ((value != null))
					{
						value.status.Add(this);
						this._componentID = value.componentID;
					}
					else
					{
						this._componentID = default(int);
					}
					this.SendPropertyChanged("component");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_nflplayers(nflplayer entity)
		{
			this.SendPropertyChanging();
			entity.status = this;
		}
		
		private void detach_nflplayers(nflplayer entity)
		{
			this.SendPropertyChanging();
			entity.status = null;
		}
		
		private void attach_twitteraccounts(twitteraccount entity)
		{
			this.SendPropertyChanging();
			entity.status = this;
		}
		
		private void detach_twitteraccounts(twitteraccount entity)
		{
			this.SendPropertyChanging();
			entity.status = null;
		}
		
		private void attach_matchups(matchup entity)
		{
			this.SendPropertyChanging();
			entity.status = this;
		}
		
		private void detach_matchups(matchup entity)
		{
			this.SendPropertyChanging();
			entity.status = null;
		}
		
		private void attach_avatars(avatar entity)
		{
			this.SendPropertyChanging();
			entity.status = this;
		}
		
		private void detach_avatars(avatar entity)
		{
			this.SendPropertyChanging();
			entity.status = null;
		}
		
		private void attach_notifications(notification entity)
		{
			this.SendPropertyChanging();
			entity.status = this;
		}
		
		private void detach_notifications(notification entity)
		{
			this.SendPropertyChanging();
			entity.status = null;
		}
		
		private void attach_trophies(trophy entity)
		{
			this.SendPropertyChanging();
			entity.status = this;
		}
		
		private void detach_trophies(trophy entity)
		{
			this.SendPropertyChanging();
			entity.status = null;
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.status = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.components")]
	public partial class component : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _componentID;
		
		private string _componentName;
		
		private EntitySet<status> _status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncomponentIDChanging(int value);
    partial void OncomponentIDChanged();
    partial void OncomponentNameChanging(string value);
    partial void OncomponentNameChanged();
    #endregion
		
		public component()
		{
			this._status = new EntitySet<status>(new Action<status>(this.attach_status), new Action<status>(this.detach_status));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_componentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int componentID
		{
			get
			{
				return this._componentID;
			}
			set
			{
				if ((this._componentID != value))
				{
					this.OncomponentIDChanging(value);
					this.SendPropertyChanging();
					this._componentID = value;
					this.SendPropertyChanged("componentID");
					this.OncomponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_componentName", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string componentName
		{
			get
			{
				return this._componentName;
			}
			set
			{
				if ((this._componentName != value))
				{
					this.OncomponentNameChanging(value);
					this.SendPropertyChanging();
					this._componentName = value;
					this.SendPropertyChanged("componentName");
					this.OncomponentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="component_status", Storage="_status", ThisKey="componentID", OtherKey="componentID")]
		public EntitySet<status> status
		{
			get
			{
				return this._status;
			}
			set
			{
				this._status.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_status(status entity)
		{
			this.SendPropertyChanging();
			entity.component = this;
		}
		
		private void detach_status(status entity)
		{
			this.SendPropertyChanging();
			entity.component = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.nflteams")]
	public partial class nflteam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _teamID;
		
		private string _teamName;
		
		private string _teamSlug;
		
		private EntitySet<nflplayer> _nflplayers;
		
		private EntitySet<nflteams_twitteraccount> _nflteams_twitteraccounts;
		
		private EntitySet<gameschedule> _gameschedules;
		
		private EntitySet<gameschedule> _gameschedules1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteamIDChanging(int value);
    partial void OnteamIDChanged();
    partial void OnteamNameChanging(string value);
    partial void OnteamNameChanged();
    partial void OnteamSlugChanging(string value);
    partial void OnteamSlugChanged();
    #endregion
		
		public nflteam()
		{
			this._nflplayers = new EntitySet<nflplayer>(new Action<nflplayer>(this.attach_nflplayers), new Action<nflplayer>(this.detach_nflplayers));
			this._nflteams_twitteraccounts = new EntitySet<nflteams_twitteraccount>(new Action<nflteams_twitteraccount>(this.attach_nflteams_twitteraccounts), new Action<nflteams_twitteraccount>(this.detach_nflteams_twitteraccounts));
			this._gameschedules = new EntitySet<gameschedule>(new Action<gameschedule>(this.attach_gameschedules), new Action<gameschedule>(this.detach_gameschedules));
			this._gameschedules1 = new EntitySet<gameschedule>(new Action<gameschedule>(this.attach_gameschedules1), new Action<gameschedule>(this.detach_gameschedules1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int teamID
		{
			get
			{
				return this._teamID;
			}
			set
			{
				if ((this._teamID != value))
				{
					this.OnteamIDChanging(value);
					this.SendPropertyChanging();
					this._teamID = value;
					this.SendPropertyChanged("teamID");
					this.OnteamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamName", DbType="NVarChar(45)")]
		public string teamName
		{
			get
			{
				return this._teamName;
			}
			set
			{
				if ((this._teamName != value))
				{
					this.OnteamNameChanging(value);
					this.SendPropertyChanging();
					this._teamName = value;
					this.SendPropertyChanged("teamName");
					this.OnteamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamSlug", DbType="NVarChar(8)")]
		public string teamSlug
		{
			get
			{
				return this._teamSlug;
			}
			set
			{
				if ((this._teamSlug != value))
				{
					this.OnteamSlugChanging(value);
					this.SendPropertyChanging();
					this._teamSlug = value;
					this.SendPropertyChanged("teamSlug");
					this.OnteamSlugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflteam_nflplayer", Storage="_nflplayers", ThisKey="teamID", OtherKey="teamID")]
		public EntitySet<nflplayer> nflplayers
		{
			get
			{
				return this._nflplayers;
			}
			set
			{
				this._nflplayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflteam_nflteams_twitteraccount", Storage="_nflteams_twitteraccounts", ThisKey="teamID", OtherKey="teamID")]
		public EntitySet<nflteams_twitteraccount> nflteams_twitteraccounts
		{
			get
			{
				return this._nflteams_twitteraccounts;
			}
			set
			{
				this._nflteams_twitteraccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflteam_gameschedule", Storage="_gameschedules", ThisKey="teamID", OtherKey="nflTeamHome")]
		public EntitySet<gameschedule> gameschedules
		{
			get
			{
				return this._gameschedules;
			}
			set
			{
				this._gameschedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflteam_gameschedule1", Storage="_gameschedules1", ThisKey="teamID", OtherKey="nflTeamAway")]
		public EntitySet<gameschedule> gameschedules1
		{
			get
			{
				return this._gameschedules1;
			}
			set
			{
				this._gameschedules1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_nflplayers(nflplayer entity)
		{
			this.SendPropertyChanging();
			entity.nflteam = this;
		}
		
		private void detach_nflplayers(nflplayer entity)
		{
			this.SendPropertyChanging();
			entity.nflteam = null;
		}
		
		private void attach_nflteams_twitteraccounts(nflteams_twitteraccount entity)
		{
			this.SendPropertyChanging();
			entity.nflteam = this;
		}
		
		private void detach_nflteams_twitteraccounts(nflteams_twitteraccount entity)
		{
			this.SendPropertyChanging();
			entity.nflteam = null;
		}
		
		private void attach_gameschedules(gameschedule entity)
		{
			this.SendPropertyChanging();
			entity.nflteam = this;
		}
		
		private void detach_gameschedules(gameschedule entity)
		{
			this.SendPropertyChanging();
			entity.nflteam = null;
		}
		
		private void attach_gameschedules1(gameschedule entity)
		{
			this.SendPropertyChanging();
			entity.nflteam1 = this;
		}
		
		private void detach_gameschedules1(gameschedule entity)
		{
			this.SendPropertyChanging();
			entity.nflteam1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.twitteraccounttype")]
	public partial class twitteraccounttype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _twitterAccountTypeID;
		
		private string _accountType;
		
		private EntitySet<twitteraccount> _twitteraccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntwitterAccountTypeIDChanging(int value);
    partial void OntwitterAccountTypeIDChanged();
    partial void OnaccountTypeChanging(string value);
    partial void OnaccountTypeChanged();
    #endregion
		
		public twitteraccounttype()
		{
			this._twitteraccounts = new EntitySet<twitteraccount>(new Action<twitteraccount>(this.attach_twitteraccounts), new Action<twitteraccount>(this.detach_twitteraccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twitterAccountTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int twitterAccountTypeID
		{
			get
			{
				return this._twitterAccountTypeID;
			}
			set
			{
				if ((this._twitterAccountTypeID != value))
				{
					this.OntwitterAccountTypeIDChanging(value);
					this.SendPropertyChanging();
					this._twitterAccountTypeID = value;
					this.SendPropertyChanged("twitterAccountTypeID");
					this.OntwitterAccountTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountType", DbType="NVarChar(45)")]
		public string accountType
		{
			get
			{
				return this._accountType;
			}
			set
			{
				if ((this._accountType != value))
				{
					this.OnaccountTypeChanging(value);
					this.SendPropertyChanging();
					this._accountType = value;
					this.SendPropertyChanged("accountType");
					this.OnaccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="twitteraccounttype_twitteraccount", Storage="_twitteraccounts", ThisKey="twitterAccountTypeID", OtherKey="twitterAccountTypeID")]
		public EntitySet<twitteraccount> twitteraccounts
		{
			get
			{
				return this._twitteraccounts;
			}
			set
			{
				this._twitteraccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_twitteraccounts(twitteraccount entity)
		{
			this.SendPropertyChanging();
			entity.twitteraccounttype = this;
		}
		
		private void detach_twitteraccounts(twitteraccount entity)
		{
			this.SendPropertyChanging();
			entity.twitteraccounttype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.nflplayers")]
	public partial class nflplayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _playerID;
		
		private string _firstName;
		
		private string _lastName;
		
		private int _teamID;
		
		private System.Nullable<int> _twitterAccountID;
		
		private int _statusID;
		
		private System.Nullable<bool> _hasTwitterAccount;
		
		private System.Nullable<bool> _featured;
		
		private int _positionID;
		
		private System.Nullable<int> _number;
		
		private string _college;
		
		private System.Nullable<int> _yearsExperience;
		
		private EntitySet<matchup> _matchups;
		
		private EntitySet<matchup> _matchups1;
		
		private EntitySet<users_matchup> _users_matchups;
		
		private EntitySet<message_player> _message_players;
		
		private EntityRef<position> _position;
		
		private EntityRef<status> _status;
		
		private EntityRef<nflteam> _nflteam;
		
		private EntityRef<twitteraccount> _twitteraccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnplayerIDChanging(int value);
    partial void OnplayerIDChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnteamIDChanging(int value);
    partial void OnteamIDChanged();
    partial void OntwitterAccountIDChanging(System.Nullable<int> value);
    partial void OntwitterAccountIDChanged();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    partial void OnhasTwitterAccountChanging(System.Nullable<bool> value);
    partial void OnhasTwitterAccountChanged();
    partial void OnfeaturedChanging(System.Nullable<bool> value);
    partial void OnfeaturedChanged();
    partial void OnpositionIDChanging(int value);
    partial void OnpositionIDChanged();
    partial void OnnumberChanging(System.Nullable<int> value);
    partial void OnnumberChanged();
    partial void OncollegeChanging(string value);
    partial void OncollegeChanged();
    partial void OnyearsExperienceChanging(System.Nullable<int> value);
    partial void OnyearsExperienceChanged();
    #endregion
		
		public nflplayer()
		{
			this._matchups = new EntitySet<matchup>(new Action<matchup>(this.attach_matchups), new Action<matchup>(this.detach_matchups));
			this._matchups1 = new EntitySet<matchup>(new Action<matchup>(this.attach_matchups1), new Action<matchup>(this.detach_matchups1));
			this._users_matchups = new EntitySet<users_matchup>(new Action<users_matchup>(this.attach_users_matchups), new Action<users_matchup>(this.detach_users_matchups));
			this._message_players = new EntitySet<message_player>(new Action<message_player>(this.attach_message_players), new Action<message_player>(this.detach_message_players));
			this._position = default(EntityRef<position>);
			this._status = default(EntityRef<status>);
			this._nflteam = default(EntityRef<nflteam>);
			this._twitteraccount = default(EntityRef<twitteraccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int playerID
		{
			get
			{
				return this._playerID;
			}
			set
			{
				if ((this._playerID != value))
				{
					this.OnplayerIDChanging(value);
					this.SendPropertyChanging();
					this._playerID = value;
					this.SendPropertyChanged("playerID");
					this.OnplayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NVarChar(45)")]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NVarChar(45)")]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamID", DbType="Int NOT NULL")]
		public int teamID
		{
			get
			{
				return this._teamID;
			}
			set
			{
				if ((this._teamID != value))
				{
					if (this._nflteam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIDChanging(value);
					this.SendPropertyChanging();
					this._teamID = value;
					this.SendPropertyChanged("teamID");
					this.OnteamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twitterAccountID", DbType="Int")]
		public System.Nullable<int> twitterAccountID
		{
			get
			{
				return this._twitterAccountID;
			}
			set
			{
				if ((this._twitterAccountID != value))
				{
					if (this._twitteraccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntwitterAccountIDChanging(value);
					this.SendPropertyChanging();
					this._twitterAccountID = value;
					this.SendPropertyChanged("twitterAccountID");
					this.OntwitterAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", DbType="Int NOT NULL")]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					if (this._status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hasTwitterAccount", DbType="Bit")]
		public System.Nullable<bool> hasTwitterAccount
		{
			get
			{
				return this._hasTwitterAccount;
			}
			set
			{
				if ((this._hasTwitterAccount != value))
				{
					this.OnhasTwitterAccountChanging(value);
					this.SendPropertyChanging();
					this._hasTwitterAccount = value;
					this.SendPropertyChanged("hasTwitterAccount");
					this.OnhasTwitterAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_featured", DbType="Bit")]
		public System.Nullable<bool> featured
		{
			get
			{
				return this._featured;
			}
			set
			{
				if ((this._featured != value))
				{
					this.OnfeaturedChanging(value);
					this.SendPropertyChanging();
					this._featured = value;
					this.SendPropertyChanged("featured");
					this.OnfeaturedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionID", DbType="Int NOT NULL")]
		public int positionID
		{
			get
			{
				return this._positionID;
			}
			set
			{
				if ((this._positionID != value))
				{
					if (this._position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpositionIDChanging(value);
					this.SendPropertyChanging();
					this._positionID = value;
					this.SendPropertyChanged("positionID");
					this.OnpositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int")]
		public System.Nullable<int> number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_college", DbType="VarChar(150)")]
		public string college
		{
			get
			{
				return this._college;
			}
			set
			{
				if ((this._college != value))
				{
					this.OncollegeChanging(value);
					this.SendPropertyChanging();
					this._college = value;
					this.SendPropertyChanged("college");
					this.OncollegeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yearsExperience", DbType="Int")]
		public System.Nullable<int> yearsExperience
		{
			get
			{
				return this._yearsExperience;
			}
			set
			{
				if ((this._yearsExperience != value))
				{
					this.OnyearsExperienceChanging(value);
					this.SendPropertyChanging();
					this._yearsExperience = value;
					this.SendPropertyChanged("yearsExperience");
					this.OnyearsExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflplayer_matchup", Storage="_matchups", ThisKey="playerID", OtherKey="player1ID")]
		public EntitySet<matchup> matchups
		{
			get
			{
				return this._matchups;
			}
			set
			{
				this._matchups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflplayer_matchup1", Storage="_matchups1", ThisKey="playerID", OtherKey="player2ID")]
		public EntitySet<matchup> matchups1
		{
			get
			{
				return this._matchups1;
			}
			set
			{
				this._matchups1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflplayer_users_matchup", Storage="_users_matchups", ThisKey="playerID", OtherKey="selectedPlayerID")]
		public EntitySet<users_matchup> users_matchups
		{
			get
			{
				return this._users_matchups;
			}
			set
			{
				this._users_matchups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflplayer_message_player", Storage="_message_players", ThisKey="playerID", OtherKey="playerID")]
		public EntitySet<message_player> message_players
		{
			get
			{
				return this._message_players;
			}
			set
			{
				this._message_players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="position_nflplayer", Storage="_position", ThisKey="positionID", OtherKey="positionID", IsForeignKey=true)]
		public position position
		{
			get
			{
				return this._position.Entity;
			}
			set
			{
				position previousValue = this._position.Entity;
				if (((previousValue != value) 
							|| (this._position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._position.Entity = null;
						previousValue.nflplayers.Remove(this);
					}
					this._position.Entity = value;
					if ((value != null))
					{
						value.nflplayers.Add(this);
						this._positionID = value.positionID;
					}
					else
					{
						this._positionID = default(int);
					}
					this.SendPropertyChanged("position");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_nflplayer", Storage="_status", ThisKey="statusID", OtherKey="statusID", IsForeignKey=true)]
		public status status
		{
			get
			{
				return this._status.Entity;
			}
			set
			{
				status previousValue = this._status.Entity;
				if (((previousValue != value) 
							|| (this._status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._status.Entity = null;
						previousValue.nflplayers.Remove(this);
					}
					this._status.Entity = value;
					if ((value != null))
					{
						value.nflplayers.Add(this);
						this._statusID = value.statusID;
					}
					else
					{
						this._statusID = default(int);
					}
					this.SendPropertyChanged("status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflteam_nflplayer", Storage="_nflteam", ThisKey="teamID", OtherKey="teamID", IsForeignKey=true)]
		public nflteam nflteam
		{
			get
			{
				return this._nflteam.Entity;
			}
			set
			{
				nflteam previousValue = this._nflteam.Entity;
				if (((previousValue != value) 
							|| (this._nflteam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nflteam.Entity = null;
						previousValue.nflplayers.Remove(this);
					}
					this._nflteam.Entity = value;
					if ((value != null))
					{
						value.nflplayers.Add(this);
						this._teamID = value.teamID;
					}
					else
					{
						this._teamID = default(int);
					}
					this.SendPropertyChanged("nflteam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="twitteraccount_nflplayer", Storage="_twitteraccount", ThisKey="twitterAccountID", OtherKey="twitterAccountID", IsForeignKey=true)]
		public twitteraccount twitteraccount
		{
			get
			{
				return this._twitteraccount.Entity;
			}
			set
			{
				twitteraccount previousValue = this._twitteraccount.Entity;
				if (((previousValue != value) 
							|| (this._twitteraccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._twitteraccount.Entity = null;
						previousValue.nflplayers.Remove(this);
					}
					this._twitteraccount.Entity = value;
					if ((value != null))
					{
						value.nflplayers.Add(this);
						this._twitterAccountID = value.twitterAccountID;
					}
					else
					{
						this._twitterAccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("twitteraccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_matchups(matchup entity)
		{
			this.SendPropertyChanging();
			entity.nflplayer = this;
		}
		
		private void detach_matchups(matchup entity)
		{
			this.SendPropertyChanging();
			entity.nflplayer = null;
		}
		
		private void attach_matchups1(matchup entity)
		{
			this.SendPropertyChanging();
			entity.nflplayer1 = this;
		}
		
		private void detach_matchups1(matchup entity)
		{
			this.SendPropertyChanging();
			entity.nflplayer1 = null;
		}
		
		private void attach_users_matchups(users_matchup entity)
		{
			this.SendPropertyChanging();
			entity.nflplayer = this;
		}
		
		private void detach_users_matchups(users_matchup entity)
		{
			this.SendPropertyChanging();
			entity.nflplayer = null;
		}
		
		private void attach_message_players(message_player entity)
		{
			this.SendPropertyChanging();
			entity.nflplayer = this;
		}
		
		private void detach_message_players(message_player entity)
		{
			this.SendPropertyChanging();
			entity.nflplayer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.twitteraccounts")]
	public partial class twitteraccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _twitterAccountID;
		
		private string _twitterID;
		
		private string _twitterUsername;
		
		private System.Nullable<int> _twitterAccountTypeID;
		
		private int _statusID;
		
		private string _profileImageUrl;
		
		private string _twitterName;
		
		private System.Nullable<System.DateTime> _dateModified;
		
		private string _description;
		
		private EntitySet<nflplayer> _nflplayers;
		
		private EntitySet<nflteams_twitteraccount> _nflteams_twitteraccounts;
		
		private EntityRef<status> _status;
		
		private EntityRef<twitteraccounttype> _twitteraccounttype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntwitterAccountIDChanging(int value);
    partial void OntwitterAccountIDChanged();
    partial void OntwitterIDChanging(string value);
    partial void OntwitterIDChanged();
    partial void OntwitterUsernameChanging(string value);
    partial void OntwitterUsernameChanged();
    partial void OntwitterAccountTypeIDChanging(System.Nullable<int> value);
    partial void OntwitterAccountTypeIDChanged();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    partial void OnprofileImageUrlChanging(string value);
    partial void OnprofileImageUrlChanged();
    partial void OntwitterNameChanging(string value);
    partial void OntwitterNameChanged();
    partial void OndateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OndateModifiedChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public twitteraccount()
		{
			this._nflplayers = new EntitySet<nflplayer>(new Action<nflplayer>(this.attach_nflplayers), new Action<nflplayer>(this.detach_nflplayers));
			this._nflteams_twitteraccounts = new EntitySet<nflteams_twitteraccount>(new Action<nflteams_twitteraccount>(this.attach_nflteams_twitteraccounts), new Action<nflteams_twitteraccount>(this.detach_nflteams_twitteraccounts));
			this._status = default(EntityRef<status>);
			this._twitteraccounttype = default(EntityRef<twitteraccounttype>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twitterAccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int twitterAccountID
		{
			get
			{
				return this._twitterAccountID;
			}
			set
			{
				if ((this._twitterAccountID != value))
				{
					this.OntwitterAccountIDChanging(value);
					this.SendPropertyChanging();
					this._twitterAccountID = value;
					this.SendPropertyChanged("twitterAccountID");
					this.OntwitterAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twitterID", DbType="NVarChar(45)")]
		public string twitterID
		{
			get
			{
				return this._twitterID;
			}
			set
			{
				if ((this._twitterID != value))
				{
					this.OntwitterIDChanging(value);
					this.SendPropertyChanging();
					this._twitterID = value;
					this.SendPropertyChanged("twitterID");
					this.OntwitterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twitterUsername", DbType="NVarChar(45)")]
		public string twitterUsername
		{
			get
			{
				return this._twitterUsername;
			}
			set
			{
				if ((this._twitterUsername != value))
				{
					this.OntwitterUsernameChanging(value);
					this.SendPropertyChanging();
					this._twitterUsername = value;
					this.SendPropertyChanged("twitterUsername");
					this.OntwitterUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twitterAccountTypeID", DbType="Int")]
		public System.Nullable<int> twitterAccountTypeID
		{
			get
			{
				return this._twitterAccountTypeID;
			}
			set
			{
				if ((this._twitterAccountTypeID != value))
				{
					if (this._twitteraccounttype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntwitterAccountTypeIDChanging(value);
					this.SendPropertyChanging();
					this._twitterAccountTypeID = value;
					this.SendPropertyChanged("twitterAccountTypeID");
					this.OntwitterAccountTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", DbType="Int NOT NULL")]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					if (this._status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profileImageUrl", DbType="NVarChar(150)")]
		public string profileImageUrl
		{
			get
			{
				return this._profileImageUrl;
			}
			set
			{
				if ((this._profileImageUrl != value))
				{
					this.OnprofileImageUrlChanging(value);
					this.SendPropertyChanging();
					this._profileImageUrl = value;
					this.SendPropertyChanged("profileImageUrl");
					this.OnprofileImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twitterName", DbType="NVarChar(45)")]
		public string twitterName
		{
			get
			{
				return this._twitterName;
			}
			set
			{
				if ((this._twitterName != value))
				{
					this.OntwitterNameChanging(value);
					this.SendPropertyChanging();
					this._twitterName = value;
					this.SendPropertyChanged("twitterName");
					this.OntwitterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateModified", DbType="DateTime2")]
		public System.Nullable<System.DateTime> dateModified
		{
			get
			{
				return this._dateModified;
			}
			set
			{
				if ((this._dateModified != value))
				{
					this.OndateModifiedChanging(value);
					this.SendPropertyChanging();
					this._dateModified = value;
					this.SendPropertyChanged("dateModified");
					this.OndateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(500)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="twitteraccount_nflplayer", Storage="_nflplayers", ThisKey="twitterAccountID", OtherKey="twitterAccountID")]
		public EntitySet<nflplayer> nflplayers
		{
			get
			{
				return this._nflplayers;
			}
			set
			{
				this._nflplayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="twitteraccount_nflteams_twitteraccount", Storage="_nflteams_twitteraccounts", ThisKey="twitterAccountID", OtherKey="twitterAccountID")]
		public EntitySet<nflteams_twitteraccount> nflteams_twitteraccounts
		{
			get
			{
				return this._nflteams_twitteraccounts;
			}
			set
			{
				this._nflteams_twitteraccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_twitteraccount", Storage="_status", ThisKey="statusID", OtherKey="statusID", IsForeignKey=true)]
		public status status
		{
			get
			{
				return this._status.Entity;
			}
			set
			{
				status previousValue = this._status.Entity;
				if (((previousValue != value) 
							|| (this._status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._status.Entity = null;
						previousValue.twitteraccounts.Remove(this);
					}
					this._status.Entity = value;
					if ((value != null))
					{
						value.twitteraccounts.Add(this);
						this._statusID = value.statusID;
					}
					else
					{
						this._statusID = default(int);
					}
					this.SendPropertyChanged("status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="twitteraccounttype_twitteraccount", Storage="_twitteraccounttype", ThisKey="twitterAccountTypeID", OtherKey="twitterAccountTypeID", IsForeignKey=true)]
		public twitteraccounttype twitteraccounttype
		{
			get
			{
				return this._twitteraccounttype.Entity;
			}
			set
			{
				twitteraccounttype previousValue = this._twitteraccounttype.Entity;
				if (((previousValue != value) 
							|| (this._twitteraccounttype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._twitteraccounttype.Entity = null;
						previousValue.twitteraccounts.Remove(this);
					}
					this._twitteraccounttype.Entity = value;
					if ((value != null))
					{
						value.twitteraccounts.Add(this);
						this._twitterAccountTypeID = value.twitterAccountTypeID;
					}
					else
					{
						this._twitterAccountTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("twitteraccounttype");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_nflplayers(nflplayer entity)
		{
			this.SendPropertyChanging();
			entity.twitteraccount = this;
		}
		
		private void detach_nflplayers(nflplayer entity)
		{
			this.SendPropertyChanging();
			entity.twitteraccount = null;
		}
		
		private void attach_nflteams_twitteraccounts(nflteams_twitteraccount entity)
		{
			this.SendPropertyChanging();
			entity.twitteraccount = this;
		}
		
		private void detach_nflteams_twitteraccounts(nflteams_twitteraccount entity)
		{
			this.SendPropertyChanging();
			entity.twitteraccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.nflteams_twitteraccounts")]
	public partial class nflteams_twitteraccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _teamAccountID;
		
		private int _teamID;
		
		private int _twitterAccountID;
		
		private EntityRef<nflteam> _nflteam;
		
		private EntityRef<twitteraccount> _twitteraccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteamAccountIDChanging(int value);
    partial void OnteamAccountIDChanged();
    partial void OnteamIDChanging(int value);
    partial void OnteamIDChanged();
    partial void OntwitterAccountIDChanging(int value);
    partial void OntwitterAccountIDChanged();
    #endregion
		
		public nflteams_twitteraccount()
		{
			this._nflteam = default(EntityRef<nflteam>);
			this._twitteraccount = default(EntityRef<twitteraccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamAccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int teamAccountID
		{
			get
			{
				return this._teamAccountID;
			}
			set
			{
				if ((this._teamAccountID != value))
				{
					this.OnteamAccountIDChanging(value);
					this.SendPropertyChanging();
					this._teamAccountID = value;
					this.SendPropertyChanged("teamAccountID");
					this.OnteamAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamID", DbType="Int NOT NULL")]
		public int teamID
		{
			get
			{
				return this._teamID;
			}
			set
			{
				if ((this._teamID != value))
				{
					if (this._nflteam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIDChanging(value);
					this.SendPropertyChanging();
					this._teamID = value;
					this.SendPropertyChanged("teamID");
					this.OnteamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twitterAccountID", DbType="Int NOT NULL")]
		public int twitterAccountID
		{
			get
			{
				return this._twitterAccountID;
			}
			set
			{
				if ((this._twitterAccountID != value))
				{
					if (this._twitteraccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntwitterAccountIDChanging(value);
					this.SendPropertyChanging();
					this._twitterAccountID = value;
					this.SendPropertyChanged("twitterAccountID");
					this.OntwitterAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflteam_nflteams_twitteraccount", Storage="_nflteam", ThisKey="teamID", OtherKey="teamID", IsForeignKey=true)]
		public nflteam nflteam
		{
			get
			{
				return this._nflteam.Entity;
			}
			set
			{
				nflteam previousValue = this._nflteam.Entity;
				if (((previousValue != value) 
							|| (this._nflteam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nflteam.Entity = null;
						previousValue.nflteams_twitteraccounts.Remove(this);
					}
					this._nflteam.Entity = value;
					if ((value != null))
					{
						value.nflteams_twitteraccounts.Add(this);
						this._teamID = value.teamID;
					}
					else
					{
						this._teamID = default(int);
					}
					this.SendPropertyChanged("nflteam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="twitteraccount_nflteams_twitteraccount", Storage="_twitteraccount", ThisKey="twitterAccountID", OtherKey="twitterAccountID", IsForeignKey=true)]
		public twitteraccount twitteraccount
		{
			get
			{
				return this._twitteraccount.Entity;
			}
			set
			{
				twitteraccount previousValue = this._twitteraccount.Entity;
				if (((previousValue != value) 
							|| (this._twitteraccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._twitteraccount.Entity = null;
						previousValue.nflteams_twitteraccounts.Remove(this);
					}
					this._twitteraccount.Entity = value;
					if ((value != null))
					{
						value.nflteams_twitteraccounts.Add(this);
						this._twitterAccountID = value.twitterAccountID;
					}
					else
					{
						this._twitterAccountID = default(int);
					}
					this.SendPropertyChanged("twitteraccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.matchups")]
	public partial class matchup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _matchupID;
		
		private int _player1ID;
		
		private int _player2ID;
		
		private int _statusID;
		
		private System.Nullable<decimal> _player1Points;
		
		private System.Nullable<decimal> _player2Points;
		
		private int _player1gameschedulleID;
		
		private System.DateTime _dateCreated;
		
		private int _player2gamescheduleID;
		
		private int _createdBy;
		
		private int _scoringTypeID;
		
		private EntitySet<users_matchup> _users_matchups;
		
		private EntityRef<nflplayer> _nflplayer;
		
		private EntityRef<nflplayer> _nflplayer1;
		
		private EntityRef<status> _status;
		
		private EntityRef<matchupscoringtype> _matchupscoringtype;
		
		private EntityRef<gameschedule> _gameschedule;
		
		private EntityRef<gameschedule> _gameschedule1;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmatchupIDChanging(int value);
    partial void OnmatchupIDChanged();
    partial void Onplayer1IDChanging(int value);
    partial void Onplayer1IDChanged();
    partial void Onplayer2IDChanging(int value);
    partial void Onplayer2IDChanged();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    partial void Onplayer1PointsChanging(System.Nullable<decimal> value);
    partial void Onplayer1PointsChanged();
    partial void Onplayer2PointsChanging(System.Nullable<decimal> value);
    partial void Onplayer2PointsChanged();
    partial void Onplayer1gameschedulleIDChanging(int value);
    partial void Onplayer1gameschedulleIDChanged();
    partial void OndateCreatedChanging(System.DateTime value);
    partial void OndateCreatedChanged();
    partial void Onplayer2gamescheduleIDChanging(int value);
    partial void Onplayer2gamescheduleIDChanged();
    partial void OncreatedByChanging(int value);
    partial void OncreatedByChanged();
    partial void OnscoringTypeIDChanging(int value);
    partial void OnscoringTypeIDChanged();
    #endregion
		
		public matchup()
		{
			this._users_matchups = new EntitySet<users_matchup>(new Action<users_matchup>(this.attach_users_matchups), new Action<users_matchup>(this.detach_users_matchups));
			this._nflplayer = default(EntityRef<nflplayer>);
			this._nflplayer1 = default(EntityRef<nflplayer>);
			this._status = default(EntityRef<status>);
			this._matchupscoringtype = default(EntityRef<matchupscoringtype>);
			this._gameschedule = default(EntityRef<gameschedule>);
			this._gameschedule1 = default(EntityRef<gameschedule>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_matchupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int matchupID
		{
			get
			{
				return this._matchupID;
			}
			set
			{
				if ((this._matchupID != value))
				{
					this.OnmatchupIDChanging(value);
					this.SendPropertyChanging();
					this._matchupID = value;
					this.SendPropertyChanged("matchupID");
					this.OnmatchupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player1ID", DbType="Int NOT NULL")]
		public int player1ID
		{
			get
			{
				return this._player1ID;
			}
			set
			{
				if ((this._player1ID != value))
				{
					if (this._nflplayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onplayer1IDChanging(value);
					this.SendPropertyChanging();
					this._player1ID = value;
					this.SendPropertyChanged("player1ID");
					this.Onplayer1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player2ID", DbType="Int NOT NULL")]
		public int player2ID
		{
			get
			{
				return this._player2ID;
			}
			set
			{
				if ((this._player2ID != value))
				{
					if (this._nflplayer1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onplayer2IDChanging(value);
					this.SendPropertyChanging();
					this._player2ID = value;
					this.SendPropertyChanged("player2ID");
					this.Onplayer2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", DbType="Int NOT NULL")]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					if (this._status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player1Points", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> player1Points
		{
			get
			{
				return this._player1Points;
			}
			set
			{
				if ((this._player1Points != value))
				{
					this.Onplayer1PointsChanging(value);
					this.SendPropertyChanging();
					this._player1Points = value;
					this.SendPropertyChanged("player1Points");
					this.Onplayer1PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player2Points", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> player2Points
		{
			get
			{
				return this._player2Points;
			}
			set
			{
				if ((this._player2Points != value))
				{
					this.Onplayer2PointsChanging(value);
					this.SendPropertyChanging();
					this._player2Points = value;
					this.SendPropertyChanged("player2Points");
					this.Onplayer2PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player1gameschedulleID", DbType="Int NOT NULL")]
		public int player1gameschedulleID
		{
			get
			{
				return this._player1gameschedulleID;
			}
			set
			{
				if ((this._player1gameschedulleID != value))
				{
					if (this._gameschedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onplayer1gameschedulleIDChanging(value);
					this.SendPropertyChanging();
					this._player1gameschedulleID = value;
					this.SendPropertyChanged("player1gameschedulleID");
					this.Onplayer1gameschedulleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime2 NOT NULL")]
		public System.DateTime dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player2gamescheduleID", DbType="Int NOT NULL")]
		public int player2gamescheduleID
		{
			get
			{
				return this._player2gamescheduleID;
			}
			set
			{
				if ((this._player2gamescheduleID != value))
				{
					if (this._gameschedule1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onplayer2gamescheduleIDChanging(value);
					this.SendPropertyChanging();
					this._player2gamescheduleID = value;
					this.SendPropertyChanged("player2gamescheduleID");
					this.Onplayer2gamescheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdBy", DbType="Int NOT NULL")]
		public int createdBy
		{
			get
			{
				return this._createdBy;
			}
			set
			{
				if ((this._createdBy != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatedByChanging(value);
					this.SendPropertyChanging();
					this._createdBy = value;
					this.SendPropertyChanged("createdBy");
					this.OncreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scoringTypeID", DbType="Int NOT NULL")]
		public int scoringTypeID
		{
			get
			{
				return this._scoringTypeID;
			}
			set
			{
				if ((this._scoringTypeID != value))
				{
					if (this._matchupscoringtype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnscoringTypeIDChanging(value);
					this.SendPropertyChanging();
					this._scoringTypeID = value;
					this.SendPropertyChanged("scoringTypeID");
					this.OnscoringTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="matchup_users_matchup", Storage="_users_matchups", ThisKey="matchupID", OtherKey="matchupID")]
		public EntitySet<users_matchup> users_matchups
		{
			get
			{
				return this._users_matchups;
			}
			set
			{
				this._users_matchups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflplayer_matchup", Storage="_nflplayer", ThisKey="player1ID", OtherKey="playerID", IsForeignKey=true)]
		public nflplayer nflplayer
		{
			get
			{
				return this._nflplayer.Entity;
			}
			set
			{
				nflplayer previousValue = this._nflplayer.Entity;
				if (((previousValue != value) 
							|| (this._nflplayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nflplayer.Entity = null;
						previousValue.matchups.Remove(this);
					}
					this._nflplayer.Entity = value;
					if ((value != null))
					{
						value.matchups.Add(this);
						this._player1ID = value.playerID;
					}
					else
					{
						this._player1ID = default(int);
					}
					this.SendPropertyChanged("nflplayer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflplayer_matchup1", Storage="_nflplayer1", ThisKey="player2ID", OtherKey="playerID", IsForeignKey=true)]
		public nflplayer nflplayer1
		{
			get
			{
				return this._nflplayer1.Entity;
			}
			set
			{
				nflplayer previousValue = this._nflplayer1.Entity;
				if (((previousValue != value) 
							|| (this._nflplayer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nflplayer1.Entity = null;
						previousValue.matchups1.Remove(this);
					}
					this._nflplayer1.Entity = value;
					if ((value != null))
					{
						value.matchups1.Add(this);
						this._player2ID = value.playerID;
					}
					else
					{
						this._player2ID = default(int);
					}
					this.SendPropertyChanged("nflplayer1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_matchup", Storage="_status", ThisKey="statusID", OtherKey="statusID", IsForeignKey=true)]
		public status status
		{
			get
			{
				return this._status.Entity;
			}
			set
			{
				status previousValue = this._status.Entity;
				if (((previousValue != value) 
							|| (this._status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._status.Entity = null;
						previousValue.matchups.Remove(this);
					}
					this._status.Entity = value;
					if ((value != null))
					{
						value.matchups.Add(this);
						this._statusID = value.statusID;
					}
					else
					{
						this._statusID = default(int);
					}
					this.SendPropertyChanged("status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="matchupscoringtype_matchup", Storage="_matchupscoringtype", ThisKey="scoringTypeID", OtherKey="scoringTypeID", IsForeignKey=true)]
		public matchupscoringtype matchupscoringtype
		{
			get
			{
				return this._matchupscoringtype.Entity;
			}
			set
			{
				matchupscoringtype previousValue = this._matchupscoringtype.Entity;
				if (((previousValue != value) 
							|| (this._matchupscoringtype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._matchupscoringtype.Entity = null;
						previousValue.matchups.Remove(this);
					}
					this._matchupscoringtype.Entity = value;
					if ((value != null))
					{
						value.matchups.Add(this);
						this._scoringTypeID = value.scoringTypeID;
					}
					else
					{
						this._scoringTypeID = default(int);
					}
					this.SendPropertyChanged("matchupscoringtype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="gameschedule_matchup", Storage="_gameschedule", ThisKey="player1gameschedulleID", OtherKey="gamescheduleID", IsForeignKey=true)]
		public gameschedule gameschedule
		{
			get
			{
				return this._gameschedule.Entity;
			}
			set
			{
				gameschedule previousValue = this._gameschedule.Entity;
				if (((previousValue != value) 
							|| (this._gameschedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._gameschedule.Entity = null;
						previousValue.matchups.Remove(this);
					}
					this._gameschedule.Entity = value;
					if ((value != null))
					{
						value.matchups.Add(this);
						this._player1gameschedulleID = value.gamescheduleID;
					}
					else
					{
						this._player1gameschedulleID = default(int);
					}
					this.SendPropertyChanged("gameschedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="gameschedule_matchup1", Storage="_gameschedule1", ThisKey="player2gamescheduleID", OtherKey="gamescheduleID", IsForeignKey=true)]
		public gameschedule gameschedule1
		{
			get
			{
				return this._gameschedule1.Entity;
			}
			set
			{
				gameschedule previousValue = this._gameschedule1.Entity;
				if (((previousValue != value) 
							|| (this._gameschedule1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._gameschedule1.Entity = null;
						previousValue.matchups1.Remove(this);
					}
					this._gameschedule1.Entity = value;
					if ((value != null))
					{
						value.matchups1.Add(this);
						this._player2gamescheduleID = value.gamescheduleID;
					}
					else
					{
						this._player2gamescheduleID = default(int);
					}
					this.SendPropertyChanged("gameschedule1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_matchup", Storage="_user", ThisKey="createdBy", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.matchups.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.matchups.Add(this);
						this._createdBy = value.userID;
					}
					else
					{
						this._createdBy = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users_matchups(users_matchup entity)
		{
			this.SendPropertyChanging();
			entity.matchup = this;
		}
		
		private void detach_users_matchups(users_matchup entity)
		{
			this.SendPropertyChanging();
			entity.matchup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.matchupscoringtype")]
	public partial class matchupscoringtype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _scoringTypeID;
		
		private string _scoringType;
		
		private EntitySet<matchup> _matchups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnscoringTypeIDChanging(int value);
    partial void OnscoringTypeIDChanged();
    partial void OnscoringTypeChanging(string value);
    partial void OnscoringTypeChanged();
    #endregion
		
		public matchupscoringtype()
		{
			this._matchups = new EntitySet<matchup>(new Action<matchup>(this.attach_matchups), new Action<matchup>(this.detach_matchups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scoringTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int scoringTypeID
		{
			get
			{
				return this._scoringTypeID;
			}
			set
			{
				if ((this._scoringTypeID != value))
				{
					this.OnscoringTypeIDChanging(value);
					this.SendPropertyChanging();
					this._scoringTypeID = value;
					this.SendPropertyChanged("scoringTypeID");
					this.OnscoringTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scoringType", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string scoringType
		{
			get
			{
				return this._scoringType;
			}
			set
			{
				if ((this._scoringType != value))
				{
					this.OnscoringTypeChanging(value);
					this.SendPropertyChanging();
					this._scoringType = value;
					this.SendPropertyChanged("scoringType");
					this.OnscoringTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="matchupscoringtype_matchup", Storage="_matchups", ThisKey="scoringTypeID", OtherKey="scoringTypeID")]
		public EntitySet<matchup> matchups
		{
			get
			{
				return this._matchups;
			}
			set
			{
				this._matchups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_matchups(matchup entity)
		{
			this.SendPropertyChanging();
			entity.matchupscoringtype = this;
		}
		
		private void detach_matchups(matchup entity)
		{
			this.SendPropertyChanging();
			entity.matchupscoringtype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.nflseason")]
	public partial class nflseason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _seasonID;
		
		private int _year;
		
		private EntitySet<gameschedule> _gameschedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnseasonIDChanging(int value);
    partial void OnseasonIDChanged();
    partial void OnyearChanging(int value);
    partial void OnyearChanged();
    #endregion
		
		public nflseason()
		{
			this._gameschedules = new EntitySet<gameschedule>(new Action<gameschedule>(this.attach_gameschedules), new Action<gameschedule>(this.detach_gameschedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seasonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int seasonID
		{
			get
			{
				return this._seasonID;
			}
			set
			{
				if ((this._seasonID != value))
				{
					this.OnseasonIDChanging(value);
					this.SendPropertyChanging();
					this._seasonID = value;
					this.SendPropertyChanged("seasonID");
					this.OnseasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="Int NOT NULL")]
		public int year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflseason_gameschedule", Storage="_gameschedules", ThisKey="seasonID", OtherKey="seasonID")]
		public EntitySet<gameschedule> gameschedules
		{
			get
			{
				return this._gameschedules;
			}
			set
			{
				this._gameschedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_gameschedules(gameschedule entity)
		{
			this.SendPropertyChanging();
			entity.nflseason = this;
		}
		
		private void detach_gameschedules(gameschedule entity)
		{
			this.SendPropertyChanging();
			entity.nflseason = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users_accounts")]
	public partial class users_account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userAccountID;
		
		private int _userID;
		
		private int _accountID;
		
		private int _accountTypeID;
		
		private EntityRef<accounttype> _accounttype;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserAccountIDChanging(int value);
    partial void OnuserAccountIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnaccountIDChanging(int value);
    partial void OnaccountIDChanged();
    partial void OnaccountTypeIDChanging(int value);
    partial void OnaccountTypeIDChanged();
    #endregion
		
		public users_account()
		{
			this._accounttype = default(EntityRef<accounttype>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userAccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userAccountID
		{
			get
			{
				return this._userAccountID;
			}
			set
			{
				if ((this._userAccountID != value))
				{
					this.OnuserAccountIDChanging(value);
					this.SendPropertyChanging();
					this._userAccountID = value;
					this.SendPropertyChanged("userAccountID");
					this.OnuserAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountID", DbType="Int NOT NULL")]
		public int accountID
		{
			get
			{
				return this._accountID;
			}
			set
			{
				if ((this._accountID != value))
				{
					this.OnaccountIDChanging(value);
					this.SendPropertyChanging();
					this._accountID = value;
					this.SendPropertyChanged("accountID");
					this.OnaccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountTypeID", DbType="Int NOT NULL")]
		public int accountTypeID
		{
			get
			{
				return this._accountTypeID;
			}
			set
			{
				if ((this._accountTypeID != value))
				{
					if (this._accounttype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaccountTypeIDChanging(value);
					this.SendPropertyChanging();
					this._accountTypeID = value;
					this.SendPropertyChanged("accountTypeID");
					this.OnaccountTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="accounttype_users_account", Storage="_accounttype", ThisKey="accountTypeID", OtherKey="accounttypeID", IsForeignKey=true)]
		public accounttype accounttype
		{
			get
			{
				return this._accounttype.Entity;
			}
			set
			{
				accounttype previousValue = this._accounttype.Entity;
				if (((previousValue != value) 
							|| (this._accounttype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._accounttype.Entity = null;
						previousValue.users_accounts.Remove(this);
					}
					this._accounttype.Entity = value;
					if ((value != null))
					{
						value.users_accounts.Add(this);
						this._accountTypeID = value.accounttypeID;
					}
					else
					{
						this._accountTypeID = default(int);
					}
					this.SendPropertyChanged("accounttype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_account", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.users_accounts.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.users_accounts.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users_matchups")]
	public partial class users_matchup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userMatchupID;
		
		private int _userID;
		
		private int _selectedPlayerID;
		
		private int _matchupID;
		
		private System.DateTime _dateCreated;
		
		private System.Nullable<bool> _correctMatchup;
		
		private EntityRef<matchup> _matchup;
		
		private EntityRef<nflplayer> _nflplayer;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserMatchupIDChanging(int value);
    partial void OnuserMatchupIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnselectedPlayerIDChanging(int value);
    partial void OnselectedPlayerIDChanged();
    partial void OnmatchupIDChanging(int value);
    partial void OnmatchupIDChanged();
    partial void OndateCreatedChanging(System.DateTime value);
    partial void OndateCreatedChanged();
    partial void OncorrectMatchupChanging(System.Nullable<bool> value);
    partial void OncorrectMatchupChanged();
    #endregion
		
		public users_matchup()
		{
			this._matchup = default(EntityRef<matchup>);
			this._nflplayer = default(EntityRef<nflplayer>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userMatchupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userMatchupID
		{
			get
			{
				return this._userMatchupID;
			}
			set
			{
				if ((this._userMatchupID != value))
				{
					this.OnuserMatchupIDChanging(value);
					this.SendPropertyChanging();
					this._userMatchupID = value;
					this.SendPropertyChanged("userMatchupID");
					this.OnuserMatchupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_selectedPlayerID", DbType="Int NOT NULL")]
		public int selectedPlayerID
		{
			get
			{
				return this._selectedPlayerID;
			}
			set
			{
				if ((this._selectedPlayerID != value))
				{
					if (this._nflplayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnselectedPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._selectedPlayerID = value;
					this.SendPropertyChanged("selectedPlayerID");
					this.OnselectedPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_matchupID", DbType="Int NOT NULL")]
		public int matchupID
		{
			get
			{
				return this._matchupID;
			}
			set
			{
				if ((this._matchupID != value))
				{
					if (this._matchup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmatchupIDChanging(value);
					this.SendPropertyChanging();
					this._matchupID = value;
					this.SendPropertyChanged("matchupID");
					this.OnmatchupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime2 NOT NULL")]
		public System.DateTime dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_correctMatchup", DbType="Bit")]
		public System.Nullable<bool> correctMatchup
		{
			get
			{
				return this._correctMatchup;
			}
			set
			{
				if ((this._correctMatchup != value))
				{
					this.OncorrectMatchupChanging(value);
					this.SendPropertyChanging();
					this._correctMatchup = value;
					this.SendPropertyChanged("correctMatchup");
					this.OncorrectMatchupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="matchup_users_matchup", Storage="_matchup", ThisKey="matchupID", OtherKey="matchupID", IsForeignKey=true)]
		public matchup matchup
		{
			get
			{
				return this._matchup.Entity;
			}
			set
			{
				matchup previousValue = this._matchup.Entity;
				if (((previousValue != value) 
							|| (this._matchup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._matchup.Entity = null;
						previousValue.users_matchups.Remove(this);
					}
					this._matchup.Entity = value;
					if ((value != null))
					{
						value.users_matchups.Add(this);
						this._matchupID = value.matchupID;
					}
					else
					{
						this._matchupID = default(int);
					}
					this.SendPropertyChanged("matchup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflplayer_users_matchup", Storage="_nflplayer", ThisKey="selectedPlayerID", OtherKey="playerID", IsForeignKey=true)]
		public nflplayer nflplayer
		{
			get
			{
				return this._nflplayer.Entity;
			}
			set
			{
				nflplayer previousValue = this._nflplayer.Entity;
				if (((previousValue != value) 
							|| (this._nflplayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nflplayer.Entity = null;
						previousValue.users_matchups.Remove(this);
					}
					this._nflplayer.Entity = value;
					if ((value != null))
					{
						value.users_matchups.Add(this);
						this._selectedPlayerID = value.playerID;
					}
					else
					{
						this._selectedPlayerID = default(int);
					}
					this.SendPropertyChanged("nflplayer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_matchup", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.users_matchups.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.users_matchups.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.avatars")]
	public partial class avatar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _avatarID;
		
		private string _imageName;
		
		private int _statusID;
		
		private EntitySet<user> _users;
		
		private EntityRef<status> _status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnavatarIDChanging(int value);
    partial void OnavatarIDChanged();
    partial void OnimageNameChanging(string value);
    partial void OnimageNameChanged();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    #endregion
		
		public avatar()
		{
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			this._status = default(EntityRef<status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatarID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int avatarID
		{
			get
			{
				return this._avatarID;
			}
			set
			{
				if ((this._avatarID != value))
				{
					this.OnavatarIDChanging(value);
					this.SendPropertyChanging();
					this._avatarID = value;
					this.SendPropertyChanged("avatarID");
					this.OnavatarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageName", DbType="NVarChar(145) NOT NULL", CanBeNull=false)]
		public string imageName
		{
			get
			{
				return this._imageName;
			}
			set
			{
				if ((this._imageName != value))
				{
					this.OnimageNameChanging(value);
					this.SendPropertyChanging();
					this._imageName = value;
					this.SendPropertyChanged("imageName");
					this.OnimageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", DbType="Int NOT NULL")]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					if (this._status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="avatar_user", Storage="_users", ThisKey="avatarID", OtherKey="avatarID")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_avatar", Storage="_status", ThisKey="statusID", OtherKey="statusID", IsForeignKey=true)]
		public status status
		{
			get
			{
				return this._status.Entity;
			}
			set
			{
				status previousValue = this._status.Entity;
				if (((previousValue != value) 
							|| (this._status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._status.Entity = null;
						previousValue.avatars.Remove(this);
					}
					this._status.Entity = value;
					if ((value != null))
					{
						value.avatars.Add(this);
						this._statusID = value.statusID;
					}
					else
					{
						this._statusID = default(int);
					}
					this.SendPropertyChanged("status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.avatar = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.avatar = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_logins")]
	public partial class user_login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _loginID;
		
		private int _userID;
		
		private System.DateTime _loginDate;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnloginIDChanging(int value);
    partial void OnloginIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnloginDateChanging(System.DateTime value);
    partial void OnloginDateChanged();
    #endregion
		
		public user_login()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loginID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int loginID
		{
			get
			{
				return this._loginID;
			}
			set
			{
				if ((this._loginID != value))
				{
					this.OnloginIDChanging(value);
					this.SendPropertyChanging();
					this._loginID = value;
					this.SendPropertyChanged("loginID");
					this.OnloginIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loginDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime loginDate
		{
			get
			{
				return this._loginDate;
			}
			set
			{
				if ((this._loginDate != value))
				{
					this.OnloginDateChanging(value);
					this.SendPropertyChanging();
					this._loginDate = value;
					this.SendPropertyChanged("loginDate");
					this.OnloginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_user_login", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.user_logins.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.user_logins.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.notifications")]
	public partial class notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _notificationID;
		
		private string _notificationGUID;
		
		private int _sentTo;
		
		private int _sentFrom;
		
		private int _statusID;
		
		private int _typeID;
		
		private System.Nullable<int> _entityID;
		
		private System.DateTime _dateCreated;
		
		private System.Nullable<System.DateTime> _dateUpdated;
		
		private EntityRef<status> _status;
		
		private EntityRef<notification_type> _notification_type;
		
		private EntityRef<user> _user;
		
		private EntityRef<user> _user1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnotificationIDChanging(int value);
    partial void OnnotificationIDChanged();
    partial void OnnotificationGUIDChanging(string value);
    partial void OnnotificationGUIDChanged();
    partial void OnsentToChanging(int value);
    partial void OnsentToChanged();
    partial void OnsentFromChanging(int value);
    partial void OnsentFromChanged();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OnentityIDChanging(System.Nullable<int> value);
    partial void OnentityIDChanged();
    partial void OndateCreatedChanging(System.DateTime value);
    partial void OndateCreatedChanged();
    partial void OndateUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OndateUpdatedChanged();
    #endregion
		
		public notification()
		{
			this._status = default(EntityRef<status>);
			this._notification_type = default(EntityRef<notification_type>);
			this._user = default(EntityRef<user>);
			this._user1 = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int notificationID
		{
			get
			{
				return this._notificationID;
			}
			set
			{
				if ((this._notificationID != value))
				{
					this.OnnotificationIDChanging(value);
					this.SendPropertyChanging();
					this._notificationID = value;
					this.SendPropertyChanged("notificationID");
					this.OnnotificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationGUID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string notificationGUID
		{
			get
			{
				return this._notificationGUID;
			}
			set
			{
				if ((this._notificationGUID != value))
				{
					this.OnnotificationGUIDChanging(value);
					this.SendPropertyChanging();
					this._notificationGUID = value;
					this.SendPropertyChanged("notificationGUID");
					this.OnnotificationGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sentTo", DbType="Int NOT NULL")]
		public int sentTo
		{
			get
			{
				return this._sentTo;
			}
			set
			{
				if ((this._sentTo != value))
				{
					if (this._user1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsentToChanging(value);
					this.SendPropertyChanging();
					this._sentTo = value;
					this.SendPropertyChanged("sentTo");
					this.OnsentToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sentFrom", DbType="Int NOT NULL")]
		public int sentFrom
		{
			get
			{
				return this._sentFrom;
			}
			set
			{
				if ((this._sentFrom != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsentFromChanging(value);
					this.SendPropertyChanging();
					this._sentFrom = value;
					this.SendPropertyChanged("sentFrom");
					this.OnsentFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", DbType="Int NOT NULL")]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					if (this._status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					if (this._notification_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entityID", DbType="Int")]
		public System.Nullable<int> entityID
		{
			get
			{
				return this._entityID;
			}
			set
			{
				if ((this._entityID != value))
				{
					this.OnentityIDChanging(value);
					this.SendPropertyChanging();
					this._entityID = value;
					this.SendPropertyChanged("entityID");
					this.OnentityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime2 NOT NULL")]
		public System.DateTime dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateUpdated", DbType="DateTime2")]
		public System.Nullable<System.DateTime> dateUpdated
		{
			get
			{
				return this._dateUpdated;
			}
			set
			{
				if ((this._dateUpdated != value))
				{
					this.OndateUpdatedChanging(value);
					this.SendPropertyChanging();
					this._dateUpdated = value;
					this.SendPropertyChanged("dateUpdated");
					this.OndateUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_notification", Storage="_status", ThisKey="statusID", OtherKey="statusID", IsForeignKey=true)]
		public status status
		{
			get
			{
				return this._status.Entity;
			}
			set
			{
				status previousValue = this._status.Entity;
				if (((previousValue != value) 
							|| (this._status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._status.Entity = null;
						previousValue.notifications.Remove(this);
					}
					this._status.Entity = value;
					if ((value != null))
					{
						value.notifications.Add(this);
						this._statusID = value.statusID;
					}
					else
					{
						this._statusID = default(int);
					}
					this.SendPropertyChanged("status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="notification_type_notification", Storage="_notification_type", ThisKey="typeID", OtherKey="notificationTypeID", IsForeignKey=true)]
		public notification_type notification_type
		{
			get
			{
				return this._notification_type.Entity;
			}
			set
			{
				notification_type previousValue = this._notification_type.Entity;
				if (((previousValue != value) 
							|| (this._notification_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._notification_type.Entity = null;
						previousValue.notifications.Remove(this);
					}
					this._notification_type.Entity = value;
					if ((value != null))
					{
						value.notifications.Add(this);
						this._typeID = value.notificationTypeID;
					}
					else
					{
						this._typeID = default(int);
					}
					this.SendPropertyChanged("notification_type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_notification", Storage="_user", ThisKey="sentFrom", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.notifications.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.notifications.Add(this);
						this._sentFrom = value.userID;
					}
					else
					{
						this._sentFrom = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_notification1", Storage="_user1", ThisKey="sentTo", OtherKey="userID", IsForeignKey=true)]
		public user user1
		{
			get
			{
				return this._user1.Entity;
			}
			set
			{
				user previousValue = this._user1.Entity;
				if (((previousValue != value) 
							|| (this._user1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user1.Entity = null;
						previousValue.notifications1.Remove(this);
					}
					this._user1.Entity = value;
					if ((value != null))
					{
						value.notifications1.Add(this);
						this._sentTo = value.userID;
					}
					else
					{
						this._sentTo = default(int);
					}
					this.SendPropertyChanged("user1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.notification_types")]
	public partial class notification_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _notificationTypeID;
		
		private string _type;
		
		private EntitySet<notification> _notifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnotificationTypeIDChanging(int value);
    partial void OnnotificationTypeIDChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public notification_type()
		{
			this._notifications = new EntitySet<notification>(new Action<notification>(this.attach_notifications), new Action<notification>(this.detach_notifications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int notificationTypeID
		{
			get
			{
				return this._notificationTypeID;
			}
			set
			{
				if ((this._notificationTypeID != value))
				{
					this.OnnotificationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._notificationTypeID = value;
					this.SendPropertyChanged("notificationTypeID");
					this.OnnotificationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="notification_type_notification", Storage="_notifications", ThisKey="notificationTypeID", OtherKey="typeID")]
		public EntitySet<notification> notifications
		{
			get
			{
				return this._notifications;
			}
			set
			{
				this._notifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_notifications(notification entity)
		{
			this.SendPropertyChanging();
			entity.notification_type = this;
		}
		
		private void detach_notifications(notification entity)
		{
			this.SendPropertyChanging();
			entity.notification_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users_settings")]
	public partial class users_setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userSettingsID;
		
		private int _userID;
		
		private System.Nullable<bool> _emailNotifications;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserSettingsIDChanging(int value);
    partial void OnuserSettingsIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnemailNotificationsChanging(System.Nullable<bool> value);
    partial void OnemailNotificationsChanged();
    #endregion
		
		public users_setting()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userSettingsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userSettingsID
		{
			get
			{
				return this._userSettingsID;
			}
			set
			{
				if ((this._userSettingsID != value))
				{
					this.OnuserSettingsIDChanging(value);
					this.SendPropertyChanging();
					this._userSettingsID = value;
					this.SendPropertyChanged("userSettingsID");
					this.OnuserSettingsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailNotifications", DbType="Bit")]
		public System.Nullable<bool> emailNotifications
		{
			get
			{
				return this._emailNotifications;
			}
			set
			{
				if ((this._emailNotifications != value))
				{
					this.OnemailNotificationsChanging(value);
					this.SendPropertyChanging();
					this._emailNotifications = value;
					this.SendPropertyChanged("emailNotifications");
					this.OnemailNotificationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_setting", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.users_settings.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.users_settings.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.accounttype")]
	public partial class accounttype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _accounttypeID;
		
		private string _accountName;
		
		private EntitySet<users_account> _users_accounts;
		
		private EntitySet<users_view> _users_views;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnaccounttypeIDChanging(int value);
    partial void OnaccounttypeIDChanged();
    partial void OnaccountNameChanging(string value);
    partial void OnaccountNameChanged();
    #endregion
		
		public accounttype()
		{
			this._users_accounts = new EntitySet<users_account>(new Action<users_account>(this.attach_users_accounts), new Action<users_account>(this.detach_users_accounts));
			this._users_views = new EntitySet<users_view>(new Action<users_view>(this.attach_users_views), new Action<users_view>(this.detach_users_views));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accounttypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int accounttypeID
		{
			get
			{
				return this._accounttypeID;
			}
			set
			{
				if ((this._accounttypeID != value))
				{
					this.OnaccounttypeIDChanging(value);
					this.SendPropertyChanging();
					this._accounttypeID = value;
					this.SendPropertyChanged("accounttypeID");
					this.OnaccounttypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountName", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string accountName
		{
			get
			{
				return this._accountName;
			}
			set
			{
				if ((this._accountName != value))
				{
					this.OnaccountNameChanging(value);
					this.SendPropertyChanging();
					this._accountName = value;
					this.SendPropertyChanged("accountName");
					this.OnaccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="accounttype_users_account", Storage="_users_accounts", ThisKey="accounttypeID", OtherKey="accountTypeID")]
		public EntitySet<users_account> users_accounts
		{
			get
			{
				return this._users_accounts;
			}
			set
			{
				this._users_accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="accounttype_users_view", Storage="_users_views", ThisKey="accounttypeID", OtherKey="accounttypeID")]
		public EntitySet<users_view> users_views
		{
			get
			{
				return this._users_views;
			}
			set
			{
				this._users_views.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users_accounts(users_account entity)
		{
			this.SendPropertyChanging();
			entity.accounttype = this;
		}
		
		private void detach_users_accounts(users_account entity)
		{
			this.SendPropertyChanging();
			entity.accounttype = null;
		}
		
		private void attach_users_views(users_view entity)
		{
			this.SendPropertyChanging();
			entity.accounttype = this;
		}
		
		private void detach_users_views(users_view entity)
		{
			this.SendPropertyChanging();
			entity.accounttype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.messagecontexttype")]
	public partial class messagecontexttype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _messageContextTypeID;
		
		private string _messageContextTypeName;
		
		private EntitySet<message> _messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmessageContextTypeIDChanging(int value);
    partial void OnmessageContextTypeIDChanged();
    partial void OnmessageContextTypeNameChanging(string value);
    partial void OnmessageContextTypeNameChanged();
    #endregion
		
		public messagecontexttype()
		{
			this._messages = new EntitySet<message>(new Action<message>(this.attach_messages), new Action<message>(this.detach_messages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageContextTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int messageContextTypeID
		{
			get
			{
				return this._messageContextTypeID;
			}
			set
			{
				if ((this._messageContextTypeID != value))
				{
					this.OnmessageContextTypeIDChanging(value);
					this.SendPropertyChanging();
					this._messageContextTypeID = value;
					this.SendPropertyChanged("messageContextTypeID");
					this.OnmessageContextTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageContextTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string messageContextTypeName
		{
			get
			{
				return this._messageContextTypeName;
			}
			set
			{
				if ((this._messageContextTypeName != value))
				{
					this.OnmessageContextTypeNameChanging(value);
					this.SendPropertyChanging();
					this._messageContextTypeName = value;
					this.SendPropertyChanged("messageContextTypeName");
					this.OnmessageContextTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="messagecontexttype_message", Storage="_messages", ThisKey="messageContextTypeID", OtherKey="messageContextTypeID")]
		public EntitySet<message> messages
		{
			get
			{
				return this._messages;
			}
			set
			{
				this._messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_messages(message entity)
		{
			this.SendPropertyChanging();
			entity.messagecontexttype = this;
		}
		
		private void detach_messages(message entity)
		{
			this.SendPropertyChanging();
			entity.messagecontexttype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.gameschedule")]
	public partial class gameschedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _gamescheduleID;
		
		private int _seasonID;
		
		private int _nflTeamHome;
		
		private int _nflTeamAway;
		
		private System.DateTime _gameDate;
		
		private int _weekNumber;
		
		private EntitySet<matchup> _matchups;
		
		private EntitySet<matchup> _matchups1;
		
		private EntityRef<nflteam> _nflteam;
		
		private EntityRef<nflteam> _nflteam1;
		
		private EntityRef<nflseason> _nflseason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngamescheduleIDChanging(int value);
    partial void OngamescheduleIDChanged();
    partial void OnseasonIDChanging(int value);
    partial void OnseasonIDChanged();
    partial void OnnflTeamHomeChanging(int value);
    partial void OnnflTeamHomeChanged();
    partial void OnnflTeamAwayChanging(int value);
    partial void OnnflTeamAwayChanged();
    partial void OngameDateChanging(System.DateTime value);
    partial void OngameDateChanged();
    partial void OnweekNumberChanging(int value);
    partial void OnweekNumberChanged();
    #endregion
		
		public gameschedule()
		{
			this._matchups = new EntitySet<matchup>(new Action<matchup>(this.attach_matchups), new Action<matchup>(this.detach_matchups));
			this._matchups1 = new EntitySet<matchup>(new Action<matchup>(this.attach_matchups1), new Action<matchup>(this.detach_matchups1));
			this._nflteam = default(EntityRef<nflteam>);
			this._nflteam1 = default(EntityRef<nflteam>);
			this._nflseason = default(EntityRef<nflseason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gamescheduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int gamescheduleID
		{
			get
			{
				return this._gamescheduleID;
			}
			set
			{
				if ((this._gamescheduleID != value))
				{
					this.OngamescheduleIDChanging(value);
					this.SendPropertyChanging();
					this._gamescheduleID = value;
					this.SendPropertyChanged("gamescheduleID");
					this.OngamescheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seasonID", DbType="Int NOT NULL")]
		public int seasonID
		{
			get
			{
				return this._seasonID;
			}
			set
			{
				if ((this._seasonID != value))
				{
					if (this._nflseason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnseasonIDChanging(value);
					this.SendPropertyChanging();
					this._seasonID = value;
					this.SendPropertyChanged("seasonID");
					this.OnseasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nflTeamHome", DbType="Int NOT NULL")]
		public int nflTeamHome
		{
			get
			{
				return this._nflTeamHome;
			}
			set
			{
				if ((this._nflTeamHome != value))
				{
					if (this._nflteam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnflTeamHomeChanging(value);
					this.SendPropertyChanging();
					this._nflTeamHome = value;
					this.SendPropertyChanged("nflTeamHome");
					this.OnnflTeamHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nflTeamAway", DbType="Int NOT NULL")]
		public int nflTeamAway
		{
			get
			{
				return this._nflTeamAway;
			}
			set
			{
				if ((this._nflTeamAway != value))
				{
					if (this._nflteam1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnflTeamAwayChanging(value);
					this.SendPropertyChanging();
					this._nflTeamAway = value;
					this.SendPropertyChanged("nflTeamAway");
					this.OnnflTeamAwayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gameDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime gameDate
		{
			get
			{
				return this._gameDate;
			}
			set
			{
				if ((this._gameDate != value))
				{
					this.OngameDateChanging(value);
					this.SendPropertyChanging();
					this._gameDate = value;
					this.SendPropertyChanged("gameDate");
					this.OngameDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekNumber", DbType="Int NOT NULL")]
		public int weekNumber
		{
			get
			{
				return this._weekNumber;
			}
			set
			{
				if ((this._weekNumber != value))
				{
					this.OnweekNumberChanging(value);
					this.SendPropertyChanging();
					this._weekNumber = value;
					this.SendPropertyChanged("weekNumber");
					this.OnweekNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="gameschedule_matchup", Storage="_matchups", ThisKey="gamescheduleID", OtherKey="player1gameschedulleID")]
		public EntitySet<matchup> matchups
		{
			get
			{
				return this._matchups;
			}
			set
			{
				this._matchups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="gameschedule_matchup1", Storage="_matchups1", ThisKey="gamescheduleID", OtherKey="player2gamescheduleID")]
		public EntitySet<matchup> matchups1
		{
			get
			{
				return this._matchups1;
			}
			set
			{
				this._matchups1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflteam_gameschedule", Storage="_nflteam", ThisKey="nflTeamHome", OtherKey="teamID", IsForeignKey=true)]
		public nflteam nflteam
		{
			get
			{
				return this._nflteam.Entity;
			}
			set
			{
				nflteam previousValue = this._nflteam.Entity;
				if (((previousValue != value) 
							|| (this._nflteam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nflteam.Entity = null;
						previousValue.gameschedules.Remove(this);
					}
					this._nflteam.Entity = value;
					if ((value != null))
					{
						value.gameschedules.Add(this);
						this._nflTeamHome = value.teamID;
					}
					else
					{
						this._nflTeamHome = default(int);
					}
					this.SendPropertyChanged("nflteam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflteam_gameschedule1", Storage="_nflteam1", ThisKey="nflTeamAway", OtherKey="teamID", IsForeignKey=true)]
		public nflteam nflteam1
		{
			get
			{
				return this._nflteam1.Entity;
			}
			set
			{
				nflteam previousValue = this._nflteam1.Entity;
				if (((previousValue != value) 
							|| (this._nflteam1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nflteam1.Entity = null;
						previousValue.gameschedules1.Remove(this);
					}
					this._nflteam1.Entity = value;
					if ((value != null))
					{
						value.gameschedules1.Add(this);
						this._nflTeamAway = value.teamID;
					}
					else
					{
						this._nflTeamAway = default(int);
					}
					this.SendPropertyChanged("nflteam1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflseason_gameschedule", Storage="_nflseason", ThisKey="seasonID", OtherKey="seasonID", IsForeignKey=true)]
		public nflseason nflseason
		{
			get
			{
				return this._nflseason.Entity;
			}
			set
			{
				nflseason previousValue = this._nflseason.Entity;
				if (((previousValue != value) 
							|| (this._nflseason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nflseason.Entity = null;
						previousValue.gameschedules.Remove(this);
					}
					this._nflseason.Entity = value;
					if ((value != null))
					{
						value.gameschedules.Add(this);
						this._seasonID = value.seasonID;
					}
					else
					{
						this._seasonID = default(int);
					}
					this.SendPropertyChanged("nflseason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_matchups(matchup entity)
		{
			this.SendPropertyChanging();
			entity.gameschedule = this;
		}
		
		private void detach_matchups(matchup entity)
		{
			this.SendPropertyChanging();
			entity.gameschedule = null;
		}
		
		private void attach_matchups1(matchup entity)
		{
			this.SendPropertyChanging();
			entity.gameschedule1 = this;
		}
		
		private void detach_matchups1(matchup entity)
		{
			this.SendPropertyChanging();
			entity.gameschedule1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users_views")]
	public partial class users_view : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _viewID;
		
		private System.Nullable<int> _userID;
		
		private int _viewObjectID;
		
		private int _accounttypeID;
		
		private System.DateTime _dateViewed;
		
		private string _ipAddress;
		
		private EntityRef<accounttype> _accounttype;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnviewIDChanging(int value);
    partial void OnviewIDChanged();
    partial void OnuserIDChanging(System.Nullable<int> value);
    partial void OnuserIDChanged();
    partial void OnviewObjectIDChanging(int value);
    partial void OnviewObjectIDChanged();
    partial void OnaccounttypeIDChanging(int value);
    partial void OnaccounttypeIDChanged();
    partial void OndateViewedChanging(System.DateTime value);
    partial void OndateViewedChanged();
    partial void OnipAddressChanging(string value);
    partial void OnipAddressChanged();
    #endregion
		
		public users_view()
		{
			this._accounttype = default(EntityRef<accounttype>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int viewID
		{
			get
			{
				return this._viewID;
			}
			set
			{
				if ((this._viewID != value))
				{
					this.OnviewIDChanging(value);
					this.SendPropertyChanging();
					this._viewID = value;
					this.SendPropertyChanged("viewID");
					this.OnviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int")]
		public System.Nullable<int> userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewObjectID", DbType="Int NOT NULL")]
		public int viewObjectID
		{
			get
			{
				return this._viewObjectID;
			}
			set
			{
				if ((this._viewObjectID != value))
				{
					this.OnviewObjectIDChanging(value);
					this.SendPropertyChanging();
					this._viewObjectID = value;
					this.SendPropertyChanged("viewObjectID");
					this.OnviewObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accounttypeID", DbType="Int NOT NULL")]
		public int accounttypeID
		{
			get
			{
				return this._accounttypeID;
			}
			set
			{
				if ((this._accounttypeID != value))
				{
					if (this._accounttype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaccounttypeIDChanging(value);
					this.SendPropertyChanging();
					this._accounttypeID = value;
					this.SendPropertyChanged("accounttypeID");
					this.OnaccounttypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateViewed", DbType="DateTime NOT NULL")]
		public System.DateTime dateViewed
		{
			get
			{
				return this._dateViewed;
			}
			set
			{
				if ((this._dateViewed != value))
				{
					this.OndateViewedChanging(value);
					this.SendPropertyChanging();
					this._dateViewed = value;
					this.SendPropertyChanged("dateViewed");
					this.OndateViewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ipAddress", DbType="NVarChar(50)")]
		public string ipAddress
		{
			get
			{
				return this._ipAddress;
			}
			set
			{
				if ((this._ipAddress != value))
				{
					this.OnipAddressChanging(value);
					this.SendPropertyChanging();
					this._ipAddress = value;
					this.SendPropertyChanged("ipAddress");
					this.OnipAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="accounttype_users_view", Storage="_accounttype", ThisKey="accounttypeID", OtherKey="accounttypeID", IsForeignKey=true)]
		public accounttype accounttype
		{
			get
			{
				return this._accounttype.Entity;
			}
			set
			{
				accounttype previousValue = this._accounttype.Entity;
				if (((previousValue != value) 
							|| (this._accounttype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._accounttype.Entity = null;
						previousValue.users_views.Remove(this);
					}
					this._accounttype.Entity = value;
					if ((value != null))
					{
						value.users_views.Add(this);
						this._accounttypeID = value.accounttypeID;
					}
					else
					{
						this._accounttypeID = default(int);
					}
					this.SendPropertyChanged("accounttype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_view", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.users_views.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.users_views.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(Nullable<int>);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.message_users")]
	public partial class message_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _messageUserID;
		
		private int _userID;
		
		private int _messageID;
		
		private EntityRef<message> _message;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmessageUserIDChanging(int value);
    partial void OnmessageUserIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnmessageIDChanging(int value);
    partial void OnmessageIDChanged();
    #endregion
		
		public message_user()
		{
			this._message = default(EntityRef<message>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageUserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int messageUserID
		{
			get
			{
				return this._messageUserID;
			}
			set
			{
				if ((this._messageUserID != value))
				{
					this.OnmessageUserIDChanging(value);
					this.SendPropertyChanging();
					this._messageUserID = value;
					this.SendPropertyChanged("messageUserID");
					this.OnmessageUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageID", DbType="Int NOT NULL")]
		public int messageID
		{
			get
			{
				return this._messageID;
			}
			set
			{
				if ((this._messageID != value))
				{
					if (this._message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmessageIDChanging(value);
					this.SendPropertyChanging();
					this._messageID = value;
					this.SendPropertyChanged("messageID");
					this.OnmessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="message_message_user", Storage="_message", ThisKey="messageID", OtherKey="messageID", IsForeignKey=true)]
		public message message
		{
			get
			{
				return this._message.Entity;
			}
			set
			{
				message previousValue = this._message.Entity;
				if (((previousValue != value) 
							|| (this._message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._message.Entity = null;
						previousValue.message_users.Remove(this);
					}
					this._message.Entity = value;
					if ((value != null))
					{
						value.message_users.Add(this);
						this._messageID = value.messageID;
					}
					else
					{
						this._messageID = default(int);
					}
					this.SendPropertyChanged("message");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_message_user", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.message_users.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.message_users.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.message_players")]
	public partial class message_player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _messagePlayerID;
		
		private int _playerID;
		
		private int _messageID;
		
		private EntityRef<nflplayer> _nflplayer;
		
		private EntityRef<message> _message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmessagePlayerIDChanging(int value);
    partial void OnmessagePlayerIDChanged();
    partial void OnplayerIDChanging(int value);
    partial void OnplayerIDChanged();
    partial void OnmessageIDChanging(int value);
    partial void OnmessageIDChanged();
    #endregion
		
		public message_player()
		{
			this._nflplayer = default(EntityRef<nflplayer>);
			this._message = default(EntityRef<message>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messagePlayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int messagePlayerID
		{
			get
			{
				return this._messagePlayerID;
			}
			set
			{
				if ((this._messagePlayerID != value))
				{
					this.OnmessagePlayerIDChanging(value);
					this.SendPropertyChanging();
					this._messagePlayerID = value;
					this.SendPropertyChanged("messagePlayerID");
					this.OnmessagePlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerID", DbType="Int NOT NULL")]
		public int playerID
		{
			get
			{
				return this._playerID;
			}
			set
			{
				if ((this._playerID != value))
				{
					if (this._nflplayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplayerIDChanging(value);
					this.SendPropertyChanging();
					this._playerID = value;
					this.SendPropertyChanged("playerID");
					this.OnplayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageID", DbType="Int NOT NULL")]
		public int messageID
		{
			get
			{
				return this._messageID;
			}
			set
			{
				if ((this._messageID != value))
				{
					if (this._message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmessageIDChanging(value);
					this.SendPropertyChanging();
					this._messageID = value;
					this.SendPropertyChanged("messageID");
					this.OnmessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="nflplayer_message_player", Storage="_nflplayer", ThisKey="playerID", OtherKey="playerID", IsForeignKey=true)]
		public nflplayer nflplayer
		{
			get
			{
				return this._nflplayer.Entity;
			}
			set
			{
				nflplayer previousValue = this._nflplayer.Entity;
				if (((previousValue != value) 
							|| (this._nflplayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nflplayer.Entity = null;
						previousValue.message_players.Remove(this);
					}
					this._nflplayer.Entity = value;
					if ((value != null))
					{
						value.message_players.Add(this);
						this._playerID = value.playerID;
					}
					else
					{
						this._playerID = default(int);
					}
					this.SendPropertyChanged("nflplayer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="message_message_player", Storage="_message", ThisKey="messageID", OtherKey="messageID", IsForeignKey=true)]
		public message message
		{
			get
			{
				return this._message.Entity;
			}
			set
			{
				message previousValue = this._message.Entity;
				if (((previousValue != value) 
							|| (this._message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._message.Entity = null;
						previousValue.message_players.Remove(this);
					}
					this._message.Entity = value;
					if ((value != null))
					{
						value.message_players.Add(this);
						this._messageID = value.messageID;
					}
					else
					{
						this._messageID = default(int);
					}
					this.SendPropertyChanged("message");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.signup")]
	public partial class signup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _signupID;
		
		private string _email;
		
		private System.DateTime _dateCreated;
		
		private string _source;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsignupIDChanging(int value);
    partial void OnsignupIDChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OndateCreatedChanging(System.DateTime value);
    partial void OndateCreatedChanged();
    partial void OnsourceChanging(string value);
    partial void OnsourceChanged();
    #endregion
		
		public signup()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_signupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int signupID
		{
			get
			{
				return this._signupID;
			}
			set
			{
				if ((this._signupID != value))
				{
					this.OnsignupIDChanging(value);
					this.SendPropertyChanging();
					this._signupID = value;
					this.SendPropertyChanged("signupID");
					this.OnsignupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source", DbType="NVarChar(50)")]
		public string source
		{
			get
			{
				return this._source;
			}
			set
			{
				if ((this._source != value))
				{
					this.OnsourceChanging(value);
					this.SendPropertyChanging();
					this._source = value;
					this.SendPropertyChanged("source");
					this.OnsourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users_trophy")]
	public partial class users_trophy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userTrophyID;
		
		private int _userID;
		
		private int _trophyID;
		
		private System.DateTime _dateCreated;
		
		private EntityRef<trophy> _trophy;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserTrophyIDChanging(int value);
    partial void OnuserTrophyIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OntrophyIDChanging(int value);
    partial void OntrophyIDChanged();
    partial void OndateCreatedChanging(System.DateTime value);
    partial void OndateCreatedChanged();
    #endregion
		
		public users_trophy()
		{
			this._trophy = default(EntityRef<trophy>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userTrophyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userTrophyID
		{
			get
			{
				return this._userTrophyID;
			}
			set
			{
				if ((this._userTrophyID != value))
				{
					this.OnuserTrophyIDChanging(value);
					this.SendPropertyChanging();
					this._userTrophyID = value;
					this.SendPropertyChanged("userTrophyID");
					this.OnuserTrophyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trophyID", DbType="Int NOT NULL")]
		public int trophyID
		{
			get
			{
				return this._trophyID;
			}
			set
			{
				if ((this._trophyID != value))
				{
					if (this._trophy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntrophyIDChanging(value);
					this.SendPropertyChanging();
					this._trophyID = value;
					this.SendPropertyChanged("trophyID");
					this.OntrophyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="trophy_users_trophy", Storage="_trophy", ThisKey="trophyID", OtherKey="trophyID", IsForeignKey=true)]
		public trophy trophy
		{
			get
			{
				return this._trophy.Entity;
			}
			set
			{
				trophy previousValue = this._trophy.Entity;
				if (((previousValue != value) 
							|| (this._trophy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._trophy.Entity = null;
						previousValue.users_trophies.Remove(this);
					}
					this._trophy.Entity = value;
					if ((value != null))
					{
						value.users_trophies.Add(this);
						this._trophyID = value.trophyID;
					}
					else
					{
						this._trophyID = default(int);
					}
					this.SendPropertyChanged("trophy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_trophy", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.users_trophies.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.users_trophies.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.trophy")]
	public partial class trophy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _trophyID;
		
		private string _description;
		
		private string _image;
		
		private int _statusID;
		
		private string _name;
		
		private EntitySet<users_trophy> _users_trophies;
		
		private EntityRef<status> _status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrophyIDChanging(int value);
    partial void OntrophyIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public trophy()
		{
			this._users_trophies = new EntitySet<users_trophy>(new Action<users_trophy>(this.attach_users_trophies), new Action<users_trophy>(this.detach_users_trophies));
			this._status = default(EntityRef<status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trophyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int trophyID
		{
			get
			{
				return this._trophyID;
			}
			set
			{
				if ((this._trophyID != value))
				{
					this.OntrophyIDChanging(value);
					this.SendPropertyChanging();
					this._trophyID = value;
					this.SendPropertyChanged("trophyID");
					this.OntrophyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(250)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="NVarChar(50)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", DbType="Int NOT NULL")]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					if (this._status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="trophy_users_trophy", Storage="_users_trophies", ThisKey="trophyID", OtherKey="trophyID")]
		public EntitySet<users_trophy> users_trophies
		{
			get
			{
				return this._users_trophies;
			}
			set
			{
				this._users_trophies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_trophy", Storage="_status", ThisKey="statusID", OtherKey="statusID", IsForeignKey=true)]
		public status status
		{
			get
			{
				return this._status.Entity;
			}
			set
			{
				status previousValue = this._status.Entity;
				if (((previousValue != value) 
							|| (this._status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._status.Entity = null;
						previousValue.trophies.Remove(this);
					}
					this._status.Entity = value;
					if ((value != null))
					{
						value.trophies.Add(this);
						this._statusID = value.statusID;
					}
					else
					{
						this._statusID = default(int);
					}
					this.SendPropertyChanged("status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users_trophies(users_trophy entity)
		{
			this.SendPropertyChanging();
			entity.trophy = this;
		}
		
		private void detach_users_trophies(users_trophy entity)
		{
			this.SendPropertyChanging();
			entity.trophy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mediaType")]
	public partial class mediaType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _mediaTypeID;
		
		private string _mediaTypeName;
		
		private EntitySet<message> _messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmediaTypeIDChanging(int value);
    partial void OnmediaTypeIDChanged();
    partial void OnmediaTypeNameChanging(string value);
    partial void OnmediaTypeNameChanged();
    #endregion
		
		public mediaType()
		{
			this._messages = new EntitySet<message>(new Action<message>(this.attach_messages), new Action<message>(this.detach_messages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mediaTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int mediaTypeID
		{
			get
			{
				return this._mediaTypeID;
			}
			set
			{
				if ((this._mediaTypeID != value))
				{
					this.OnmediaTypeIDChanging(value);
					this.SendPropertyChanging();
					this._mediaTypeID = value;
					this.SendPropertyChanged("mediaTypeID");
					this.OnmediaTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mediaTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string mediaTypeName
		{
			get
			{
				return this._mediaTypeName;
			}
			set
			{
				if ((this._mediaTypeName != value))
				{
					this.OnmediaTypeNameChanging(value);
					this.SendPropertyChanging();
					this._mediaTypeName = value;
					this.SendPropertyChanged("mediaTypeName");
					this.OnmediaTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaType_message", Storage="_messages", ThisKey="mediaTypeID", OtherKey="mediaTypeID")]
		public EntitySet<message> messages
		{
			get
			{
				return this._messages;
			}
			set
			{
				this._messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_messages(message entity)
		{
			this.SendPropertyChanging();
			entity.mediaType = this;
		}
		
		private void detach_messages(message entity)
		{
			this.SendPropertyChanging();
			entity.mediaType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.messages")]
	public partial class message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _messageID;
		
		private string _messageText;
		
		private int _userID;
		
		private System.DateTime _dateCreated;
		
		private System.Nullable<int> _messageContextID;
		
		private int _messageContextTypeID;
		
		private System.Nullable<int> _playerID;
		
		private string _mediaUrl;
		
		private string _mediaTitle;
		
		private System.Nullable<int> _mediaTypeID;
		
		private string _mediaObjectUrl;
		
		private EntitySet<message_user> _message_users;
		
		private EntitySet<message_player> _message_players;
		
		private EntityRef<mediaType> _mediaType;
		
		private EntityRef<messagecontexttype> _messagecontexttype;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmessageIDChanging(int value);
    partial void OnmessageIDChanged();
    partial void OnmessageTextChanging(string value);
    partial void OnmessageTextChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OndateCreatedChanging(System.DateTime value);
    partial void OndateCreatedChanged();
    partial void OnmessageContextIDChanging(System.Nullable<int> value);
    partial void OnmessageContextIDChanged();
    partial void OnmessageContextTypeIDChanging(int value);
    partial void OnmessageContextTypeIDChanged();
    partial void OnplayerIDChanging(System.Nullable<int> value);
    partial void OnplayerIDChanged();
    partial void OnmediaUrlChanging(string value);
    partial void OnmediaUrlChanged();
    partial void OnmediaTitleChanging(string value);
    partial void OnmediaTitleChanged();
    partial void OnmediaTypeIDChanging(System.Nullable<int> value);
    partial void OnmediaTypeIDChanged();
    partial void OnmediaObjectUrlChanging(string value);
    partial void OnmediaObjectUrlChanged();
    #endregion
		
		public message()
		{
			this._message_users = new EntitySet<message_user>(new Action<message_user>(this.attach_message_users), new Action<message_user>(this.detach_message_users));
			this._message_players = new EntitySet<message_player>(new Action<message_player>(this.attach_message_players), new Action<message_player>(this.detach_message_players));
			this._mediaType = default(EntityRef<mediaType>);
			this._messagecontexttype = default(EntityRef<messagecontexttype>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int messageID
		{
			get
			{
				return this._messageID;
			}
			set
			{
				if ((this._messageID != value))
				{
					this.OnmessageIDChanging(value);
					this.SendPropertyChanging();
					this._messageID = value;
					this.SendPropertyChanged("messageID");
					this.OnmessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageText", DbType="NVarChar(250)")]
		public string messageText
		{
			get
			{
				return this._messageText;
			}
			set
			{
				if ((this._messageText != value))
				{
					this.OnmessageTextChanging(value);
					this.SendPropertyChanging();
					this._messageText = value;
					this.SendPropertyChanged("messageText");
					this.OnmessageTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageContextID", DbType="Int")]
		public System.Nullable<int> messageContextID
		{
			get
			{
				return this._messageContextID;
			}
			set
			{
				if ((this._messageContextID != value))
				{
					this.OnmessageContextIDChanging(value);
					this.SendPropertyChanging();
					this._messageContextID = value;
					this.SendPropertyChanged("messageContextID");
					this.OnmessageContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messageContextTypeID", DbType="Int NOT NULL")]
		public int messageContextTypeID
		{
			get
			{
				return this._messageContextTypeID;
			}
			set
			{
				if ((this._messageContextTypeID != value))
				{
					if (this._messagecontexttype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmessageContextTypeIDChanging(value);
					this.SendPropertyChanging();
					this._messageContextTypeID = value;
					this.SendPropertyChanged("messageContextTypeID");
					this.OnmessageContextTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerID", DbType="Int")]
		public System.Nullable<int> playerID
		{
			get
			{
				return this._playerID;
			}
			set
			{
				if ((this._playerID != value))
				{
					this.OnplayerIDChanging(value);
					this.SendPropertyChanging();
					this._playerID = value;
					this.SendPropertyChanged("playerID");
					this.OnplayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mediaUrl", DbType="NVarChar(500)")]
		public string mediaUrl
		{
			get
			{
				return this._mediaUrl;
			}
			set
			{
				if ((this._mediaUrl != value))
				{
					this.OnmediaUrlChanging(value);
					this.SendPropertyChanging();
					this._mediaUrl = value;
					this.SendPropertyChanged("mediaUrl");
					this.OnmediaUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mediaTitle", DbType="NVarChar(500)")]
		public string mediaTitle
		{
			get
			{
				return this._mediaTitle;
			}
			set
			{
				if ((this._mediaTitle != value))
				{
					this.OnmediaTitleChanging(value);
					this.SendPropertyChanging();
					this._mediaTitle = value;
					this.SendPropertyChanged("mediaTitle");
					this.OnmediaTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mediaTypeID", DbType="Int")]
		public System.Nullable<int> mediaTypeID
		{
			get
			{
				return this._mediaTypeID;
			}
			set
			{
				if ((this._mediaTypeID != value))
				{
					if (this._mediaType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmediaTypeIDChanging(value);
					this.SendPropertyChanging();
					this._mediaTypeID = value;
					this.SendPropertyChanged("mediaTypeID");
					this.OnmediaTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mediaObjectUrl", DbType="NVarChar(500)")]
		public string mediaObjectUrl
		{
			get
			{
				return this._mediaObjectUrl;
			}
			set
			{
				if ((this._mediaObjectUrl != value))
				{
					this.OnmediaObjectUrlChanging(value);
					this.SendPropertyChanging();
					this._mediaObjectUrl = value;
					this.SendPropertyChanged("mediaObjectUrl");
					this.OnmediaObjectUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="message_message_user", Storage="_message_users", ThisKey="messageID", OtherKey="messageID")]
		public EntitySet<message_user> message_users
		{
			get
			{
				return this._message_users;
			}
			set
			{
				this._message_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="message_message_player", Storage="_message_players", ThisKey="messageID", OtherKey="messageID")]
		public EntitySet<message_player> message_players
		{
			get
			{
				return this._message_players;
			}
			set
			{
				this._message_players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mediaType_message", Storage="_mediaType", ThisKey="mediaTypeID", OtherKey="mediaTypeID", IsForeignKey=true)]
		public mediaType mediaType
		{
			get
			{
				return this._mediaType.Entity;
			}
			set
			{
				mediaType previousValue = this._mediaType.Entity;
				if (((previousValue != value) 
							|| (this._mediaType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mediaType.Entity = null;
						previousValue.messages.Remove(this);
					}
					this._mediaType.Entity = value;
					if ((value != null))
					{
						value.messages.Add(this);
						this._mediaTypeID = value.mediaTypeID;
					}
					else
					{
						this._mediaTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("mediaType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="messagecontexttype_message", Storage="_messagecontexttype", ThisKey="messageContextTypeID", OtherKey="messageContextTypeID", IsForeignKey=true)]
		public messagecontexttype messagecontexttype
		{
			get
			{
				return this._messagecontexttype.Entity;
			}
			set
			{
				messagecontexttype previousValue = this._messagecontexttype.Entity;
				if (((previousValue != value) 
							|| (this._messagecontexttype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._messagecontexttype.Entity = null;
						previousValue.messages.Remove(this);
					}
					this._messagecontexttype.Entity = value;
					if ((value != null))
					{
						value.messages.Add(this);
						this._messageContextTypeID = value.messageContextTypeID;
					}
					else
					{
						this._messageContextTypeID = default(int);
					}
					this.SendPropertyChanged("messagecontexttype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_message", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.messages.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.messages.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_message_users(message_user entity)
		{
			this.SendPropertyChanging();
			entity.message = this;
		}
		
		private void detach_message_users(message_user entity)
		{
			this.SendPropertyChanging();
			entity.message = null;
		}
		
		private void attach_message_players(message_player entity)
		{
			this.SendPropertyChanging();
			entity.message = this;
		}
		
		private void detach_message_players(message_player entity)
		{
			this.SendPropertyChanging();
			entity.message = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private string _fullName;
		
		private string _email;
		
		private string _userName;
		
		private string _password;
		
		private int _statusID;
		
		private int _avatarID;
		
		private System.Nullable<System.DateTime> _dateCreated;
		
		private string _userGuid;
		
		private bool _isAdmin;
		
		private string _openID;
		
		private string _favoriteTeam;
		
		private string _location;
		
		private string _website;
		
		private string _bio;
		
		private string _referrer;
		
		private bool _verified;
		
		private EntitySet<matchup> _matchups;
		
		private EntitySet<users_account> _users_accounts;
		
		private EntitySet<users_matchup> _users_matchups;
		
		private EntitySet<user_login> _user_logins;
		
		private EntitySet<notification> _notifications;
		
		private EntitySet<notification> _notifications1;
		
		private EntitySet<users_setting> _users_settings;
		
		private EntitySet<users_view> _users_views;
		
		private EntitySet<message_user> _message_users;
		
		private EntitySet<users_trophy> _users_trophies;
		
		private EntitySet<message> _messages;
		
		private EntityRef<avatar> _avatar;
		
		private EntityRef<status> _status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnstatusIDChanging(int value);
    partial void OnstatusIDChanged();
    partial void OnavatarIDChanging(int value);
    partial void OnavatarIDChanged();
    partial void OndateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OndateCreatedChanged();
    partial void OnuserGuidChanging(string value);
    partial void OnuserGuidChanged();
    partial void OnisAdminChanging(bool value);
    partial void OnisAdminChanged();
    partial void OnopenIDChanging(string value);
    partial void OnopenIDChanged();
    partial void OnfavoriteTeamChanging(string value);
    partial void OnfavoriteTeamChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    partial void OnwebsiteChanging(string value);
    partial void OnwebsiteChanged();
    partial void OnbioChanging(string value);
    partial void OnbioChanged();
    partial void OnreferrerChanging(string value);
    partial void OnreferrerChanged();
    partial void OnverifiedChanging(bool value);
    partial void OnverifiedChanged();
    #endregion
		
		public user()
		{
			this._matchups = new EntitySet<matchup>(new Action<matchup>(this.attach_matchups), new Action<matchup>(this.detach_matchups));
			this._users_accounts = new EntitySet<users_account>(new Action<users_account>(this.attach_users_accounts), new Action<users_account>(this.detach_users_accounts));
			this._users_matchups = new EntitySet<users_matchup>(new Action<users_matchup>(this.attach_users_matchups), new Action<users_matchup>(this.detach_users_matchups));
			this._user_logins = new EntitySet<user_login>(new Action<user_login>(this.attach_user_logins), new Action<user_login>(this.detach_user_logins));
			this._notifications = new EntitySet<notification>(new Action<notification>(this.attach_notifications), new Action<notification>(this.detach_notifications));
			this._notifications1 = new EntitySet<notification>(new Action<notification>(this.attach_notifications1), new Action<notification>(this.detach_notifications1));
			this._users_settings = new EntitySet<users_setting>(new Action<users_setting>(this.attach_users_settings), new Action<users_setting>(this.detach_users_settings));
			this._users_views = new EntitySet<users_view>(new Action<users_view>(this.attach_users_views), new Action<users_view>(this.detach_users_views));
			this._message_users = new EntitySet<message_user>(new Action<message_user>(this.attach_message_users), new Action<message_user>(this.detach_message_users));
			this._users_trophies = new EntitySet<users_trophy>(new Action<users_trophy>(this.attach_users_trophies), new Action<users_trophy>(this.detach_users_trophies));
			this._messages = new EntitySet<message>(new Action<message>(this.attach_messages), new Action<message>(this.detach_messages));
			this._avatar = default(EntityRef<avatar>);
			this._status = default(EntityRef<status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(255)")]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(100)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(45)")]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(45)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusID", DbType="Int NOT NULL")]
		public int statusID
		{
			get
			{
				return this._statusID;
			}
			set
			{
				if ((this._statusID != value))
				{
					if (this._status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusIDChanging(value);
					this.SendPropertyChanging();
					this._statusID = value;
					this.SendPropertyChanged("statusID");
					this.OnstatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatarID", DbType="Int NOT NULL")]
		public int avatarID
		{
			get
			{
				return this._avatarID;
			}
			set
			{
				if ((this._avatarID != value))
				{
					if (this._avatar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnavatarIDChanging(value);
					this.SendPropertyChanging();
					this._avatarID = value;
					this.SendPropertyChanged("avatarID");
					this.OnavatarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreated", DbType="DateTime2")]
		public System.Nullable<System.DateTime> dateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if ((this._dateCreated != value))
				{
					this.OndateCreatedChanging(value);
					this.SendPropertyChanging();
					this._dateCreated = value;
					this.SendPropertyChanged("dateCreated");
					this.OndateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userGuid", DbType="NVarChar(100)")]
		public string userGuid
		{
			get
			{
				return this._userGuid;
			}
			set
			{
				if ((this._userGuid != value))
				{
					this.OnuserGuidChanging(value);
					this.SendPropertyChanging();
					this._userGuid = value;
					this.SendPropertyChanged("userGuid");
					this.OnuserGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAdmin", DbType="Bit NOT NULL")]
		public bool isAdmin
		{
			get
			{
				return this._isAdmin;
			}
			set
			{
				if ((this._isAdmin != value))
				{
					this.OnisAdminChanging(value);
					this.SendPropertyChanging();
					this._isAdmin = value;
					this.SendPropertyChanged("isAdmin");
					this.OnisAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_openID", DbType="NVarChar(100)")]
		public string openID
		{
			get
			{
				return this._openID;
			}
			set
			{
				if ((this._openID != value))
				{
					this.OnopenIDChanging(value);
					this.SendPropertyChanging();
					this._openID = value;
					this.SendPropertyChanged("openID");
					this.OnopenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_favoriteTeam", DbType="NVarChar(200)")]
		public string favoriteTeam
		{
			get
			{
				return this._favoriteTeam;
			}
			set
			{
				if ((this._favoriteTeam != value))
				{
					this.OnfavoriteTeamChanging(value);
					this.SendPropertyChanging();
					this._favoriteTeam = value;
					this.SendPropertyChanged("favoriteTeam");
					this.OnfavoriteTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="NVarChar(250)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_website", DbType="NVarChar(250)")]
		public string website
		{
			get
			{
				return this._website;
			}
			set
			{
				if ((this._website != value))
				{
					this.OnwebsiteChanging(value);
					this.SendPropertyChanging();
					this._website = value;
					this.SendPropertyChanged("website");
					this.OnwebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bio", DbType="NVarChar(250)")]
		public string bio
		{
			get
			{
				return this._bio;
			}
			set
			{
				if ((this._bio != value))
				{
					this.OnbioChanging(value);
					this.SendPropertyChanging();
					this._bio = value;
					this.SendPropertyChanged("bio");
					this.OnbioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_referrer", DbType="NVarChar(100)")]
		public string referrer
		{
			get
			{
				return this._referrer;
			}
			set
			{
				if ((this._referrer != value))
				{
					this.OnreferrerChanging(value);
					this.SendPropertyChanging();
					this._referrer = value;
					this.SendPropertyChanged("referrer");
					this.OnreferrerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_verified", DbType="Bit NOT NULL")]
		public bool verified
		{
			get
			{
				return this._verified;
			}
			set
			{
				if ((this._verified != value))
				{
					this.OnverifiedChanging(value);
					this.SendPropertyChanging();
					this._verified = value;
					this.SendPropertyChanged("verified");
					this.OnverifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_matchup", Storage="_matchups", ThisKey="userID", OtherKey="createdBy")]
		public EntitySet<matchup> matchups
		{
			get
			{
				return this._matchups;
			}
			set
			{
				this._matchups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_account", Storage="_users_accounts", ThisKey="userID", OtherKey="userID")]
		public EntitySet<users_account> users_accounts
		{
			get
			{
				return this._users_accounts;
			}
			set
			{
				this._users_accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_matchup", Storage="_users_matchups", ThisKey="userID", OtherKey="userID")]
		public EntitySet<users_matchup> users_matchups
		{
			get
			{
				return this._users_matchups;
			}
			set
			{
				this._users_matchups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_user_login", Storage="_user_logins", ThisKey="userID", OtherKey="userID")]
		public EntitySet<user_login> user_logins
		{
			get
			{
				return this._user_logins;
			}
			set
			{
				this._user_logins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_notification", Storage="_notifications", ThisKey="userID", OtherKey="sentFrom")]
		public EntitySet<notification> notifications
		{
			get
			{
				return this._notifications;
			}
			set
			{
				this._notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_notification1", Storage="_notifications1", ThisKey="userID", OtherKey="sentTo")]
		public EntitySet<notification> notifications1
		{
			get
			{
				return this._notifications1;
			}
			set
			{
				this._notifications1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_setting", Storage="_users_settings", ThisKey="userID", OtherKey="userID")]
		public EntitySet<users_setting> users_settings
		{
			get
			{
				return this._users_settings;
			}
			set
			{
				this._users_settings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_view", Storage="_users_views", ThisKey="userID", OtherKey="userID")]
		public EntitySet<users_view> users_views
		{
			get
			{
				return this._users_views;
			}
			set
			{
				this._users_views.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_message_user", Storage="_message_users", ThisKey="userID", OtherKey="userID")]
		public EntitySet<message_user> message_users
		{
			get
			{
				return this._message_users;
			}
			set
			{
				this._message_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_users_trophy", Storage="_users_trophies", ThisKey="userID", OtherKey="userID")]
		public EntitySet<users_trophy> users_trophies
		{
			get
			{
				return this._users_trophies;
			}
			set
			{
				this._users_trophies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_message", Storage="_messages", ThisKey="userID", OtherKey="userID")]
		public EntitySet<message> messages
		{
			get
			{
				return this._messages;
			}
			set
			{
				this._messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="avatar_user", Storage="_avatar", ThisKey="avatarID", OtherKey="avatarID", IsForeignKey=true)]
		public avatar avatar
		{
			get
			{
				return this._avatar.Entity;
			}
			set
			{
				avatar previousValue = this._avatar.Entity;
				if (((previousValue != value) 
							|| (this._avatar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._avatar.Entity = null;
						previousValue.users.Remove(this);
					}
					this._avatar.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._avatarID = value.avatarID;
					}
					else
					{
						this._avatarID = default(int);
					}
					this.SendPropertyChanged("avatar");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="status_user", Storage="_status", ThisKey="statusID", OtherKey="statusID", IsForeignKey=true)]
		public status status
		{
			get
			{
				return this._status.Entity;
			}
			set
			{
				status previousValue = this._status.Entity;
				if (((previousValue != value) 
							|| (this._status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._status.Entity = null;
						previousValue.users.Remove(this);
					}
					this._status.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._statusID = value.statusID;
					}
					else
					{
						this._statusID = default(int);
					}
					this.SendPropertyChanged("status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_matchups(matchup entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_matchups(matchup entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_users_accounts(users_account entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_users_accounts(users_account entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_users_matchups(users_matchup entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_users_matchups(users_matchup entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_user_logins(user_login entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_user_logins(user_login entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_notifications(notification entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_notifications(notification entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_notifications1(notification entity)
		{
			this.SendPropertyChanging();
			entity.user1 = this;
		}
		
		private void detach_notifications1(notification entity)
		{
			this.SendPropertyChanging();
			entity.user1 = null;
		}
		
		private void attach_users_settings(users_setting entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_users_settings(users_setting entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_users_views(users_view entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_users_views(users_view entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_message_users(message_user entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_message_users(message_user entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_users_trophies(users_trophy entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_users_trophies(users_trophy entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_messages(message entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_messages(message entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
}
#pragma warning restore 1591
